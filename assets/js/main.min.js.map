{"version":3,"sources":["accordion/accordion.js","player/player.js","flash-message/flash-message.js","song/song.js","top-menu/top-menu.js"],"names":["AccordionMenu","constructor","this","accordionItems","document","querySelectorAll","init","forEach","item","querySelector","addEventListener","currentItem","isActive","classList","contains","remove","style","maxHeight","add","content","scrollHeight","Player","audio","Audio","currentSong","currentPlaylist","isPlaying","isLooping","isRandom","titleElement","artistElement","timeElement","gendersElement","thumbElement","playPauseButton","nextButton","previousButton","loopButton","randomButton","progressBarContainer","progressBar","volumeSlider","togglePlayPause","next","previous","toggleLoop","toggleRandom","updateProgressBar","handleSongEnd","adjustVolume","e","seek","startDrag","initializeFirstSong","volume","value","event","newVolume","target","rightVolume","leftVolume","background","firstPlaylist","firstSong","encodedUrl","dataset","src","decodedUrl","atob","startsWith","updatePlayerInfo","console","error","getRandomSong","songs","let","randomSong","Math","floor","random","length","getNextSong","currentIndex","findIndex","song","getPreviousSong","play","songElement","playlistElement","syncButtons","pause","playButton","nextSong","previousSong","currentTime","textContent","thumbSrc","button","progress","duration","width","rect","getBoundingClientRect","offsetX","clientX","left","dragHandler","stopDrag","removeEventListener","window","globalPlayer","closest","playlist","fm_close","modal","handleDownload","fetch","wpApiSettings","root","method","headers","X-WP-Nonce","nonce","Content-Type","credentials","then","response","json","data","success","preventDefault","alert","message","is_premium","downloadLink","setAttribute","removeAttribute","catch","display","playerDownloadButtons","isBase64","str","btoa","PlayerManager","instance","getInstance","stopGlobalPlayer","encodedDownloadLink","getAttribute","decodedLink","log","open","location","href","userAvatar","userSubMenu","toggle"],"mappings":"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","file":"main.min.js","sourcesContent":["class AccordionMenu {\n    constructor() {\n        this.accordionItems = document.querySelectorAll('.accordion-item');\n        this.init();\n    }\n\n    init() {\n        this.accordionItems.forEach(item => {\n            const header = item.querySelector('.accordion-header');\n            \n            header.addEventListener('click', () => {\n                const currentItem = item;\n                const isActive = currentItem.classList.contains('active');\n                \n                // Fecha todos os itens\n                this.accordionItems.forEach(item => {\n                    item.classList.remove('active');\n                    const content = item.querySelector('.accordion-content');\n                    content.style.maxHeight = null;\n                });\n                \n                // Abre o item atual se não estava ativo\n                if (!isActive) {\n                    currentItem.classList.add('active');\n                    const content = currentItem.querySelector('.accordion-content');\n                    content.style.maxHeight = content.scrollHeight + \"px\";\n                }\n            });\n        });\n    }\n}\n\n// Inicializa o accordion quando o DOM estiver pronto\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (document.querySelector('.accordion-item')) {\n        new AccordionMenu();\n    }\n});","class Player {\n    constructor() {\n        this.audio = new Audio();\n        this.currentSong = null;\n        this.currentPlaylist = null;\n        this.isPlaying = false;\n        this.isLooping = false; // Estado do loop\n        this.isRandom = false; // Estado do random\n        // Elementos do player principal\n        this.titleElement = document.querySelector('.current-title');\n        this.artistElement = document.querySelector('.current-artist');\n        this.timeElement = document.querySelector('.current-time');\n        this.gendersElement = document.querySelector('.current-genders');\n        this.thumbElement = document.querySelector('.current-thumb');\n        this.playPauseButton = document.querySelector('.play-pause');\n        this.nextButton = document.querySelector('.next');\n        this.previousButton = document.querySelector('.previous');\n        this.loopButton = document.querySelector('.loop');\n        this.randomButton = document.querySelector('.random'); // Botão de random\n        this.progressBarContainer = document.querySelector('.progress-bar-container');\n        this.progressBar = document.querySelector('.progress-bar');\n        this.volumeSlider = document.querySelector('#volume-slider'); // Slider de volume\n        // Event listeners\n        this.playPauseButton.addEventListener('click', () => this.togglePlayPause());\n        this.nextButton.addEventListener('click', () => this.next());\n        this.previousButton.addEventListener('click', () => this.previous());\n        this.loopButton.addEventListener('click', () => this.toggleLoop());\n        this.randomButton.addEventListener('click', () => this.toggleRandom());\n        this.audio.addEventListener('timeupdate', () => this.updateProgressBar());\n        this.audio.addEventListener('ended', () => this.handleSongEnd());\n        this.volumeSlider.addEventListener('input', (e) => this.adjustVolume(e));\n        // Eventos para a barra de progresso\n        this.progressBarContainer.addEventListener('click', (e) => this.seek(e));\n        this.progressBarContainer.addEventListener('mousedown', (e) => this.startDrag(e));\n        // Inicializar a primeira música automaticamente\n        this.initializeFirstSong();\n        this.audio.volume = this.volumeSlider.value;\n    }\n    adjustVolume(event) {\n        // Ajustar o volume do elemento de áudio com base no slider\n        const newVolume = event.target.value;\n        const rightVolume = newVolume * 100;\n        const leftVolume = 100 - rightVolume;\n        this.audio.volume = newVolume;\n        this.volumeSlider.style.background = `linear-gradient(to right, #708303, #e9ff70 ${rightVolume}%, #272727 ${leftVolume}%)`;\n    }\n    initializeFirstSong() {\n        const firstPlaylist = document.querySelector('.playlist');\n        if (!firstPlaylist) return;\n        const firstSong = firstPlaylist.querySelector('.song');\n        if (!firstSong) return;\n        this.currentPlaylist = firstPlaylist;\n        this.currentSong = firstSong;\n        // Fix: songElement was undefined, should use firstSong\n        const encodedUrl = firstSong.dataset.src;\n        try {\n            const decodedUrl = atob(encodedUrl);\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                console.error('Invalid decoded URL:', decodedUrl);\n                return;\n            }\n            this.audio.src = decodedUrl;\n            this.updatePlayerInfo(firstSong);\n        } catch (e) {\n            console.error('Error decoding URL:', e);\n        }\n    }\n    toggleRandom() {\n        this.isRandom = !this.isRandom;\n        // Adicionar ou remover a classe 'active' no botão random\n        if (this.isRandom) {\n            this.randomButton.classList.add('active');\n        } else {\n            this.randomButton.classList.remove('active');\n        }\n    }\n    getRandomSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        let randomSong;\n        do {\n            randomSong = songs[Math.floor(Math.random() * songs.length)];\n        } while (randomSong === this.currentSong && songs.length > 1);\n        return randomSong;\n    }\n    getNextSong() {\n        if (this.isRandom) {\n            return this.getRandomSong();\n        }\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex + 1] || (this.isLooping ? songs[0] : null);\n    }\n    getPreviousSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex - 1] || (this.isLooping ? songs[songs.length - 1] : null);\n    }\n    play(songElement, playlistElement) {\n        try {\n            const encodedUrl = songElement.dataset.src;\n            const decodedUrl = atob(encodedUrl);\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                console.error('Invalid decoded URL:', decodedUrl);\n                return;\n            }\n            if (this.currentSong && this.currentSong !== songElement) {\n                this.currentSong.querySelector('.play-button').classList.remove('active');\n                this.currentSong.classList.remove('active');\n            }\n            if (this.audio.src !== decodedUrl) {\n                this.audio.src = decodedUrl;\n            }\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong = songElement;\n            this.currentPlaylist = playlistElement;\n            this.updatePlayerInfo(songElement);\n            this.syncButtons(songElement);\n        } catch (e) {\n            console.error('Error playing song:', e);\n        }\n    }\n    pause(songElement = null) {\n        this.audio.pause();\n        this.isPlaying = false;\n        if (songElement) {\n            const playButton = songElement.querySelector('.play-button');\n            if (playButton) playButton.classList.remove('active');\n            songElement.classList.remove('active');\n        }\n        this.playPauseButton.classList.remove('active');\n    }\n    togglePlayPause() {\n        if (this.isPlaying) {\n            this.pause(this.currentSong);\n        } else {\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong.querySelector('.play-button').classList.add('active');\n            this.currentSong.classList.add('active');\n            this.playPauseButton.classList.add('active');\n        }\n    }\n    toggleLoop() {\n        this.isLooping = !this.isLooping;\n        if (this.isLooping) {\n            this.loopButton.classList.add('active');\n        } else {\n            this.loopButton.classList.remove('active');\n        }\n    }\n    next() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        }\n    }\n    previous() {\n        if (this.audio.currentTime > 2) {\n            this.audio.currentTime = 0;\n        } else {\n            const previousSong = this.getPreviousSong();\n            if (previousSong) {\n                this.play(previousSong, this.currentPlaylist);\n            }\n        }\n    }\n    handleSongEnd() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        } else {\n            this.isPlaying = false;\n            this.audio.currentTime = 0;\n            this.syncButtons(null);\n        }\n    }\n    updatePlayerInfo(songElement) {\n        this.titleElement.textContent = songElement.querySelector('.title').textContent;\n        this.artistElement.textContent = songElement.querySelector('.artist').textContent;\n        this.timeElement.textContent = songElement.querySelector('.time').textContent;\n        //const genders = [...songElement.querySelectorAll('.genders li')].map(li => li.textContent);\n        //this.gendersElement.textContent = genders.join(', ');\n        const thumbSrc = songElement.querySelector('.thumb').src;\n        this.thumbElement.src = thumbSrc;\n    }\n    syncButtons(songElement) {\n        document.querySelectorAll('.play-button').forEach(button => button.classList.remove('active'));\n        document.querySelectorAll('.song').forEach(song => song.classList.remove('active'));\n\n        if (songElement) {\n            songElement.querySelector('.play-button').classList.add('active');\n            songElement.classList.add('active');\n            this.playPauseButton.classList.add('active');\n        } else {\n            this.playPauseButton.classList.remove('active');\n        }\n    }\n    updateProgressBar() {\n        const progress = (this.audio.currentTime / this.audio.duration) * 100;\n        this.progressBar.style.width = `${progress}%`;\n    }\n    seek(event) {\n        const rect = this.progressBarContainer.getBoundingClientRect();\n        const offsetX = event.clientX - rect.left;\n        const percentage = offsetX / rect.width;\n        this.audio.currentTime = percentage * this.audio.duration;\n    }\n    startDrag(event) {\n        const dragHandler = (e) => this.seek(e);\n        const stopDrag = () => {\n            document.removeEventListener('mousemove', dragHandler);\n            document.removeEventListener('mouseup', stopDrag);\n        };\n        document.addEventListener('mousemove', dragHandler);\n        document.addEventListener('mouseup', stopDrag);\n\n        this.seek(event);\n    }\n}    \n// Inicializar o player apenas se o elemento existir\nif (document.querySelector('#player-main')) {\n    \n    window.globalPlayer = new Player(); // Define como global\n\n    // Configurar eventos para as músicas\n    document.addEventListener('click', (event) => {\n        const playButton = event.target.closest('.play-button');\n        if (!playButton) return;\n\n        const song = playButton.closest('.song');\n        const playlist = playButton.closest('.playlist');\n        \n        if (!song || !playlist) return;\n\n        if (globalPlayer.currentSong === song && globalPlayer.isPlaying) {\n            globalPlayer.pause(song);\n        } else {\n            globalPlayer.play(song, playlist);\n        }\n    });\n}","let fm_close = document.querySelector('.fm-close');\nlet modal = document.querySelector('.flash-message-overlay');\n\nif(fm_close ){\n    fm_close.addEventListener('click', function() {\n        modal.style.display = 'none';\n    });\n}\n","function handleDownload(event) {\n    fetch(`${wpApiSettings.root}soniica/v1/register-download`, {\n        method: 'POST',\n        headers: {\n            'X-WP-Nonce': wpApiSettings.nonce,\n            'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (!data.success) {\n            event.preventDefault();\n            alert(data.message);\n            return false;\n        } else {\n            // Atualiza o estado de todos os botões de download para usuários não premium\n            if (!data.is_premium) {\n                document.querySelectorAll('.download-link').forEach(downloadLink => {\n                    downloadLink.classList.add('download-blocked');\n                    downloadLink.setAttribute('title', 'You have reached the download limit on free plan today.');\n                    //downloadLink.textContent = 'Download indisponível';\n                    downloadLink.setAttribute('href', '/get-premium');\n                    downloadLink.removeAttribute('download');\n                });\n            }\n        }\n    })\n    .catch(error => {\n        console.error('Erro:', error);\n        event.preventDefault();\n        return false;\n    });\n\n    return true;\n}\n\nconst playerDownloadButtons = document.querySelectorAll('.download-link');\n\nfunction isBase64(str) {\n    try {\n        return btoa(atob(str)) === str;\n    } catch (e) {\n        return false;\n    }\n}\n\nconst PlayerManager = (function () {\n    let instance = null;\n\n    return {\n        getInstance: function () {\n            if (!instance) {\n                instance = new Player();\n            }\n            return instance;\n        }\n    };\n})();\n\nfunction stopGlobalPlayer() {\n    if (window.globalPlayer && window.globalPlayer.currentSong) {\n        window.globalPlayer.pause(window.globalPlayer.currentSong);\n    }\n}\n\n\n\nplayerDownloadButtons.forEach((button) => {\n    button.addEventListener('click', (event) => {\n        event.preventDefault();\n\n        let encodedDownloadLink = button.getAttribute(\"href\");\n        let decodedLink = '';\n\n        // Verifica se a string é Base64 válida antes de decodificar\n        if (isBase64(encodedDownloadLink)) {\n            // se for base64, decodifica\n            decodedLink = atob(encodedDownloadLink);\n        } else {\n            // se não for, usa o link normal\n            decodedLink = encodedDownloadLink;\n \n            window.location.href = decodedLink;\n            return;\n        }\n\n        if (!button.classList.contains('download-blocked')) {\n            window.open(decodedLink, '_blank');\n        } else {\n            console.log('deu ruim');\n        }\n    });\n});\n\nwindow.addEventListener('beforeunload', function(event) {\n    stopGlobalPlayer();\n});\n","\n    const userAvatar = document.querySelector(\".user-avatar\");\n    const userSubMenu = document.querySelector(\".user-sub-menu\");\n\n    if (userAvatar && userSubMenu) {\n        userAvatar.addEventListener(\"click\", function (event) {\n            userSubMenu.classList.toggle(\"active\");\n        });\n\n        document.addEventListener(\"click\", function (event) {\n            if (!userAvatar.contains(event.target) && !userSubMenu.contains(event.target)) {\n                userSubMenu.classList.remove(\"active\");\n            }\n        });\n    }\n"]}