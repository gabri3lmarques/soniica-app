{"version":3,"sources":["song/song.js","flash-message/flash-message.js","player/player.js","top-menu/top-menu.js","accordion/accordion.js"],"names":["handleDownload","event","fetch","wpApiSettings","root","method","headers","X-WP-Nonce","nonce","Content-Type","credentials","then","response","json","data","success","preventDefault","alert","message","is_premium","document","querySelectorAll","forEach","downloadLink","classList","add","setAttribute","textContent","removeAttribute","style","cursor","catch","error","console","log","playerDownloadButtons","isBase64","str","btoa","atob","e","PlayerManager","let","instance","getInstance","Player","stopGlobalPlayer","window","globalPlayer","currentSong","pause","button","addEventListener","encodedDownloadLink","getAttribute","decodedLink","contains","open","location","href","constructor","this","audio","Audio","currentPlaylist","isPlaying","isLooping","isRandom","titleElement","querySelector","artistElement","timeElement","gendersElement","thumbElement","playPauseButton","nextButton","previousButton","loopButton","randomButton","progressBarContainer","progressBar","volumeSlider","togglePlayPause","next","previous","toggleLoop","toggleRandom","updateProgressBar","handleSongEnd","adjustVolume","seek","startDrag","initializeFirstSong","volume","value","newVolume","target","rightVolume","leftVolume","background","firstPlaylist","firstSong","encodedUrl","dataset","src","decodedUrl","startsWith","updatePlayerInfo","remove","getRandomSong","songs","randomSong","Math","floor","random","length","getNextSong","currentIndex","findIndex","song","getPreviousSong","play","songElement","playlistElement","syncButtons","playButton","nextSong","previousSong","currentTime","thumbSrc","progress","duration","width","rect","getBoundingClientRect","offsetX","clientX","left","dragHandler","stopDrag","removeEventListener","closest","playlist","userAvatar","userSubMenu","toggle","AccordionMenu","accordionItems","init","item","currentItem","isActive","maxHeight","content","scrollHeight"],"mappings":"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","file":"main.min.js","sourcesContent":["function handleDownload(event) {\n    fetch(`${wpApiSettings.root}soniica/v1/register-download`, {\n        method: 'POST',\n        headers: {\n            'X-WP-Nonce': wpApiSettings.nonce,\n            'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (!data.success) {\n            event.preventDefault();\n            alert(data.message);\n            return false;\n        } else {\n            // Atualiza o estado de todos os botões de download para usuários não premium\n            if (!data.is_premium) {\n                document.querySelectorAll('.download-link').forEach(downloadLink => {\n                    downloadLink.classList.add('download-blocked');\n                    downloadLink.setAttribute('title', 'Aguarde 24 horas para fazer outro download.');\n                    downloadLink.textContent = 'Download indisponível';\n                    downloadLink.removeAttribute('href');\n                    downloadLink.removeAttribute('download');\n                    downloadLink.style.cursor = 'not-allowed';\n                });\n            }\n        }\n    })\n    .catch(error => {\n        console.error('Erro:', error);\n        event.preventDefault();\n        return false;\n    });\n\n    return true;\n}\n\nconst playerDownloadButtons = document.querySelectorAll('.download-link');\n\nfunction isBase64(str) {\n    try {\n        return btoa(atob(str)) === str;\n    } catch (e) {\n        return false;\n    }\n}\n\nconst PlayerManager = (function () {\n    let instance = null;\n\n    return {\n        getInstance: function () {\n            if (!instance) {\n                instance = new Player();\n            }\n            return instance;\n        }\n    };\n})();\n\nfunction stopGlobalPlayer() {\n    if (window.globalPlayer && window.globalPlayer.currentSong) {\n        window.globalPlayer.pause(window.globalPlayer.currentSong);\n    }\n}\n\n\n\nplayerDownloadButtons.forEach((button) => {\n    button.addEventListener('click', (event) => {\n        event.preventDefault();\n\n        let encodedDownloadLink = button.getAttribute(\"href\");\n        let decodedLink = '';\n\n        // Verifica se a string é Base64 válida antes de decodificar\n        if (isBase64(encodedDownloadLink)) {\n            // se for base64, decodifica\n            decodedLink = atob(encodedDownloadLink);\n        } else {\n            // se não for, usa o link normal\n            decodedLink = encodedDownloadLink;\n \n            window.location.href = decodedLink;\n            return;\n        }\n\n        if (!button.classList.contains('download-blocked')) {\n            window.open(decodedLink, '_blank');\n        } else {\n            console.log('deu ruim');\n        }\n    });\n});\n\nwindow.addEventListener('beforeunload', function(event) {\n    stopGlobalPlayer();\n});\n","console.log(\"flase message \");","class Player {\n    constructor() {\n        this.audio = new Audio();\n        this.currentSong = null;\n        this.currentPlaylist = null;\n        this.isPlaying = false;\n        this.isLooping = false; // Estado do loop\n        this.isRandom = false; // Estado do random\n\n        // Elementos do player principal\n        this.titleElement = document.querySelector('.current-title');\n        this.artistElement = document.querySelector('.current-artist');\n        this.timeElement = document.querySelector('.current-time');\n        this.gendersElement = document.querySelector('.current-genders');\n        this.thumbElement = document.querySelector('.current-thumb');\n        this.playPauseButton = document.querySelector('.play-pause');\n        this.nextButton = document.querySelector('.next');\n        this.previousButton = document.querySelector('.previous');\n        this.loopButton = document.querySelector('.loop');\n        this.randomButton = document.querySelector('.random'); // Botão de random\n        this.progressBarContainer = document.querySelector('.progress-bar-container');\n        this.progressBar = document.querySelector('.progress-bar');\n        this.volumeSlider = document.querySelector('#volume-slider'); // Slider de volume\n    \n       \n\n        // Event listeners\n        this.playPauseButton.addEventListener('click', () => this.togglePlayPause());\n        this.nextButton.addEventListener('click', () => this.next());\n        this.previousButton.addEventListener('click', () => this.previous());\n        this.loopButton.addEventListener('click', () => this.toggleLoop());\n        this.randomButton.addEventListener('click', () => this.toggleRandom());\n        this.audio.addEventListener('timeupdate', () => this.updateProgressBar());\n        this.audio.addEventListener('ended', () => this.handleSongEnd());\n        this.volumeSlider.addEventListener('input', (e) => this.adjustVolume(e));\n\n        // Eventos para a barra de progresso\n        this.progressBarContainer.addEventListener('click', (e) => this.seek(e));\n        this.progressBarContainer.addEventListener('mousedown', (e) => this.startDrag(e));\n\n        // Inicializar a primeira música automaticamente\n        this.initializeFirstSong();\n        \n        this.audio.volume = this.volumeSlider.value;\n    }\n    \n    adjustVolume(event) {\n        // Ajustar o volume do elemento de áudio com base no slider\n        const newVolume = event.target.value;\n        const rightVolume = newVolume * 100;\n        const leftVolume = 100 - rightVolume;\n\n        this.audio.volume = newVolume;\n        \n        this.volumeSlider.style.background = `linear-gradient(to right, #708303, #e9ff70 ${rightVolume}%, #272727 ${leftVolume}%)`;\n    }\n\n    initializeFirstSong() {\n        const firstPlaylist = document.querySelector('.playlist');\n        if (!firstPlaylist) return;\n\n        const firstSong = firstPlaylist.querySelector('.song');\n        if (!firstSong) return;\n\n        this.currentPlaylist = firstPlaylist;\n        this.currentSong = firstSong;\n        \n        // Fix: songElement was undefined, should use firstSong\n        const encodedUrl = firstSong.dataset.src;\n        \n        try {\n            const decodedUrl = atob(encodedUrl);\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                console.error('Invalid decoded URL:', decodedUrl);\n                return;\n            }\n            \n            this.audio.src = decodedUrl;\n            this.updatePlayerInfo(firstSong);\n\n        } catch (e) {\n            console.error('Error decoding URL:', e);\n        }\n    }\n\n    toggleRandom() {\n        this.isRandom = !this.isRandom;\n\n        // Adicionar ou remover a classe 'active' no botão random\n        if (this.isRandom) {\n            this.randomButton.classList.add('active');\n        } else {\n            this.randomButton.classList.remove('active');\n        }\n    }\n\n    getRandomSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        let randomSong;\n\n        do {\n            randomSong = songs[Math.floor(Math.random() * songs.length)];\n        } while (randomSong === this.currentSong && songs.length > 1);\n\n        return randomSong;\n    }\n\n    getNextSong() {\n        if (this.isRandom) {\n            return this.getRandomSong();\n        }\n\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex + 1] || (this.isLooping ? songs[0] : null);\n    }\n\n    getPreviousSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex - 1] || (this.isLooping ? songs[songs.length - 1] : null);\n    }\n\n    play(songElement, playlistElement) {\n        try {\n            const encodedUrl = songElement.dataset.src;\n            const decodedUrl = atob(encodedUrl);\n\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                console.error('Invalid decoded URL:', decodedUrl);\n                return;\n            }\n\n            if (this.currentSong && this.currentSong !== songElement) {\n                this.currentSong.querySelector('.play-button').classList.remove('active');\n                this.currentSong.classList.remove('active');\n            }\n\n            if (this.audio.src !== decodedUrl) {\n                this.audio.src = decodedUrl;\n            }\n\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong = songElement;\n            this.currentPlaylist = playlistElement;\n\n            this.updatePlayerInfo(songElement);\n            this.syncButtons(songElement);\n        } catch (e) {\n            console.error('Error playing song:', e);\n        }\n    }\n\n    pause(songElement = null) {\n        this.audio.pause();\n        this.isPlaying = false;\n    \n        if (songElement) {\n            const playButton = songElement.querySelector('.play-button');\n            if (playButton) playButton.classList.remove('active');\n            songElement.classList.remove('active');\n        }\n    \n        this.playPauseButton.classList.remove('active');\n    }\n\n    togglePlayPause() {\n        if (this.isPlaying) {\n            this.pause(this.currentSong);\n        } else {\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong.querySelector('.play-button').classList.add('active');\n            this.currentSong.classList.add('active');\n            this.playPauseButton.classList.add('active');\n        }\n    }\n\n    toggleLoop() {\n        this.isLooping = !this.isLooping;\n\n        if (this.isLooping) {\n            this.loopButton.classList.add('active');\n        } else {\n            this.loopButton.classList.remove('active');\n        }\n    }\n\n    next() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        }\n    }\n\n    previous() {\n        if (this.audio.currentTime > 2) {\n            this.audio.currentTime = 0;\n        } else {\n            const previousSong = this.getPreviousSong();\n            if (previousSong) {\n                this.play(previousSong, this.currentPlaylist);\n            }\n        }\n    }\n\n    handleSongEnd() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        } else {\n            this.isPlaying = false;\n            this.audio.currentTime = 0;\n            this.syncButtons(null);\n        }\n    }\n\n    updatePlayerInfo(songElement) {\n        this.titleElement.textContent = songElement.querySelector('.title').textContent;\n        this.artistElement.textContent = songElement.querySelector('.artist').textContent;\n        this.timeElement.textContent = songElement.querySelector('.time').textContent;\n\n        //const genders = [...songElement.querySelectorAll('.genders li')].map(li => li.textContent);\n        //this.gendersElement.textContent = genders.join(', ');\n\n        const thumbSrc = songElement.querySelector('.thumb').src;\n        this.thumbElement.src = thumbSrc;\n    }\n\n    syncButtons(songElement) {\n        document.querySelectorAll('.play-button').forEach(button => button.classList.remove('active'));\n        document.querySelectorAll('.song').forEach(song => song.classList.remove('active'));\n\n        if (songElement) {\n            songElement.querySelector('.play-button').classList.add('active');\n            songElement.classList.add('active');\n            this.playPauseButton.classList.add('active');\n        } else {\n            this.playPauseButton.classList.remove('active');\n        }\n    }\n\n    updateProgressBar() {\n        const progress = (this.audio.currentTime / this.audio.duration) * 100;\n        this.progressBar.style.width = `${progress}%`;\n    }\n\n    seek(event) {\n        const rect = this.progressBarContainer.getBoundingClientRect();\n        const offsetX = event.clientX - rect.left;\n        const percentage = offsetX / rect.width;\n        this.audio.currentTime = percentage * this.audio.duration;\n    }\n\n    startDrag(event) {\n        const dragHandler = (e) => this.seek(e);\n        const stopDrag = () => {\n            document.removeEventListener('mousemove', dragHandler);\n            document.removeEventListener('mouseup', stopDrag);\n        };\n\n        document.addEventListener('mousemove', dragHandler);\n        document.addEventListener('mouseup', stopDrag);\n\n        this.seek(event);\n    }\n}    \n\n\n// Inicializar o player apenas se o elemento existir\nif (document.querySelector('#player-main')) {\n    \n    window.globalPlayer = new Player(); // Define como global\n\n    // Configurar eventos para as músicas\n    document.addEventListener('click', (event) => {\n        const playButton = event.target.closest('.play-button');\n        if (!playButton) return;\n\n        const song = playButton.closest('.song');\n        const playlist = playButton.closest('.playlist');\n        \n        if (!song || !playlist) return;\n\n        if (globalPlayer.currentSong === song && globalPlayer.isPlaying) {\n            globalPlayer.pause(song);\n        } else {\n            globalPlayer.play(song, playlist);\n        }\n    });\n}","\n    const userAvatar = document.querySelector(\".user-avatar\");\n    const userSubMenu = document.querySelector(\".user-sub-menu\");\n\n    if (userAvatar && userSubMenu) {\n        userAvatar.addEventListener(\"click\", function (event) {\n            userSubMenu.classList.toggle(\"active\");\n        });\n\n        document.addEventListener(\"click\", function (event) {\n            if (!userAvatar.contains(event.target) && !userSubMenu.contains(event.target)) {\n                userSubMenu.classList.remove(\"active\");\n            }\n        });\n    }\n","class AccordionMenu {\n    constructor() {\n        this.accordionItems = document.querySelectorAll('.accordion-item');\n        this.init();\n    }\n\n    init() {\n        this.accordionItems.forEach(item => {\n            const header = item.querySelector('.accordion-header');\n            \n            header.addEventListener('click', () => {\n                const currentItem = item;\n                const isActive = currentItem.classList.contains('active');\n                \n                // Fecha todos os itens\n                this.accordionItems.forEach(item => {\n                    item.classList.remove('active');\n                    const content = item.querySelector('.accordion-content');\n                    content.style.maxHeight = null;\n                });\n                \n                // Abre o item atual se não estava ativo\n                if (!isActive) {\n                    currentItem.classList.add('active');\n                    const content = currentItem.querySelector('.accordion-content');\n                    content.style.maxHeight = content.scrollHeight + \"px\";\n                }\n            });\n        });\n    }\n}\n\n// Inicializa o accordion quando o DOM estiver pronto\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (document.querySelector('.accordion-item')) {\n        new AccordionMenu();\n    }\n});"]}