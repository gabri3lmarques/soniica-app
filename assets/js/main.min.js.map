{"version":3,"sources":["accordion/accordion.js","flash-message/flash-message.js","profile-img/profile-img.js","player/player.js","song/song.js","top-menu/top-menu.js"],"names":["AccordionMenu","constructor","this","accordionItems","document","querySelectorAll","init","forEach","item","querySelector","addEventListener","currentItem","isActive","classList","contains","remove","style","maxHeight","add","content","scrollHeight","let","fm_close","modal","profilePictureForm","display","removeProfilePicture","e","preventDefault","fileInput","formData","FormData","append","files","fetch","method","body","credentials","then","res","json","data","console","log","message","getElementById","textContent","confirm","src","Player","audio","Audio","currentSong","currentPlaylist","isPlaying","isLooping","isRandom","titleElement","artistElement","timeElement","gendersElement","thumbElement","playPauseButton","nextButton","previousButton","loopButton","randomButton","progressBarContainer","progressBar","volumeSlider","togglePlayPause","next","previous","toggleLoop","toggleRandom","updateProgressBar","handleSongEnd","adjustVolume","seek","startDrag","initializeFirstSong","volume","value","event","newVolume","target","rightVolume","leftVolume","background","firstPlaylist","firstSong","encodedUrl","dataset","decodedUrl","atob","startsWith","updatePlayerInfo","error","getRandomSong","songs","randomSong","Math","floor","random","length","getNextSong","currentIndex","findIndex","song","getPreviousSong","play","songElement","playlistElement","syncButtons","pause","playButton","nextSong","previousSong","currentTime","thumbSrc","button","progress","duration","width","rect","getBoundingClientRect","offsetX","clientX","left","dragHandler","stopDrag","removeEventListener","handleDownload","wpApiSettings","root","headers","X-WP-Nonce","nonce","Content-Type","response","success","alert","is_premium","downloadLink","setAttribute","removeAttribute","catch","window","globalPlayer","closest","playlist","playerDownloadButtons","isBase64","str","btoa","PlayerManager","instance","getInstance","stopGlobalPlayer","encodedDownloadLink","getAttribute","decodedLink","open","location","href","userAvatar","userSubMenu","toggle"],"mappings":"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","file":"main.min.js","sourcesContent":["class AccordionMenu {\r\n    constructor() {\r\n        this.accordionItems = document.querySelectorAll('.accordion-item');\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.accordionItems.forEach(item => {\r\n            const header = item.querySelector('.accordion-header');\r\n            \r\n            header.addEventListener('click', () => {\r\n                const currentItem = item;\r\n                const isActive = currentItem.classList.contains('active');\r\n                \r\n                // Fecha todos os itens\r\n                this.accordionItems.forEach(item => {\r\n                    item.classList.remove('active');\r\n                    const content = item.querySelector('.accordion-content');\r\n                    content.style.maxHeight = null;\r\n                });\r\n                \r\n                // Abre o item atual se não estava ativo\r\n                if (!isActive) {\r\n                    currentItem.classList.add('active');\r\n                    const content = currentItem.querySelector('.accordion-content');\r\n                    content.style.maxHeight = content.scrollHeight + \"px\";\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n// Inicializa o accordion quando o DOM estiver pronto\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    if (document.querySelector('.accordion-item')) {\r\n        new AccordionMenu();\r\n    }\r\n});","let fm_close = document.querySelector('.fm-close');\r\nlet modal = document.querySelector('.flash-message-overlay');\r\n\r\nif(fm_close ){\r\n    fm_close.addEventListener('click', function() {\r\n        modal.style.display = 'none';\r\n    });\r\n}\r\n","let profilePictureForm = document.querySelector(\"#profile-picture-form\");\r\nif(profilePictureForm) {\r\n    profilePictureForm.addEventListener(\"submit\", function (e) {\r\n        e.preventDefault();\r\n        const fileInput = document.querySelector('input[name=\"profile_picture\"]');\r\n        const formData = new FormData();\r\n        formData.append(\"action\", \"upload_profile_picture\");\r\n        formData.append(\"profile_picture\", fileInput.files[0]);\r\n        fetch(\"/wp-admin/admin-ajax.php\", {\r\n          method: \"POST\",\r\n          body: formData,\r\n          credentials: \"same-origin\",\r\n        })\r\n          .then(res => res.json())\r\n          .then(data => {\r\n            console.log(data.data?.message)\r\n            document.getElementById(\"upload-status\").textContent = data.data?.message;\r\n          });\r\n      });\r\n}\r\n\r\nlet removeProfilePicture = document.getElementById(\"remove-profile-picture\");\r\nif(removeProfilePicture) {\r\n  removeProfilePicture.addEventListener(\"click\", function () {\r\n    if (!confirm(\"Are you sure you want to remove your profile picture?\")) return;\r\n  \r\n    const formData = new FormData();\r\n    formData.append(\"action\", \"remove_profile_picture\");\r\n  \r\n    fetch(\"/wp-admin/admin-ajax.php\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n      credentials: \"same-origin\",\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        console.log(data);\r\n        document.getElementById(\"upload-status\").textContent = data.data?.message || \"Erro ao remover imagem.\";\r\n        document.getElementById(\"profile-picture-preview\").src = \"\"; // ou uma imagem padrão\r\n      });\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n  ","class Player {\r\n    constructor() {\r\n        this.audio = new Audio();\r\n        this.currentSong = null;\r\n        this.currentPlaylist = null;\r\n        this.isPlaying = false;\r\n        this.isLooping = false; // Estado do loop\r\n        this.isRandom = false; // Estado do random\r\n        // Elementos do player principal\r\n        this.titleElement = document.querySelector('.current-title');\r\n        this.artistElement = document.querySelector('.current-artist');\r\n        this.timeElement = document.querySelector('.current-time');\r\n        this.gendersElement = document.querySelector('.current-genders');\r\n        this.thumbElement = document.querySelector('.current-thumb');\r\n        this.playPauseButton = document.querySelector('.play-pause');\r\n        this.nextButton = document.querySelector('.next');\r\n        this.previousButton = document.querySelector('.previous');\r\n        this.loopButton = document.querySelector('.loop');\r\n        this.randomButton = document.querySelector('.random'); // Botão de random\r\n        this.progressBarContainer = document.querySelector('.progress-bar-container');\r\n        this.progressBar = document.querySelector('.progress-bar');\r\n        this.volumeSlider = document.querySelector('#volume-slider'); // Slider de volume\r\n        // Event listeners\r\n        this.playPauseButton.addEventListener('click', () => this.togglePlayPause());\r\n        this.nextButton.addEventListener('click', () => this.next());\r\n        this.previousButton.addEventListener('click', () => this.previous());\r\n        this.loopButton.addEventListener('click', () => this.toggleLoop());\r\n        this.randomButton.addEventListener('click', () => this.toggleRandom());\r\n        this.audio.addEventListener('timeupdate', () => this.updateProgressBar());\r\n        this.audio.addEventListener('ended', () => this.handleSongEnd());\r\n        this.volumeSlider.addEventListener('input', (e) => this.adjustVolume(e));\r\n        // Eventos para a barra de progresso\r\n        this.progressBarContainer.addEventListener('click', (e) => this.seek(e));\r\n        this.progressBarContainer.addEventListener('mousedown', (e) => this.startDrag(e));\r\n        // Inicializar a primeira música automaticamente\r\n        this.initializeFirstSong();\r\n        this.audio.volume = this.volumeSlider.value;\r\n    }\r\n    adjustVolume(event) {\r\n        // Ajustar o volume do elemento de áudio com base no slider\r\n        const newVolume = event.target.value;\r\n        const rightVolume = newVolume * 100;\r\n        const leftVolume = 100 - rightVolume;\r\n        this.audio.volume = newVolume;\r\n        this.volumeSlider.style.background = `linear-gradient(to right, #708303, #e9ff70 ${rightVolume}%, #272727 ${leftVolume}%)`;\r\n    }\r\n    initializeFirstSong() {\r\n        const firstPlaylist = document.querySelector('.playlist');\r\n        if (!firstPlaylist) return;\r\n        const firstSong = firstPlaylist.querySelector('.song');\r\n        if (!firstSong) return;\r\n        this.currentPlaylist = firstPlaylist;\r\n        this.currentSong = firstSong;\r\n        // Fix: songElement was undefined, should use firstSong\r\n        const encodedUrl = firstSong.dataset.src;\r\n        try {\r\n            const decodedUrl = atob(encodedUrl);\r\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\r\n                console.error('Invalid decoded URL:', decodedUrl);\r\n                return;\r\n            }\r\n            this.audio.src = decodedUrl;\r\n            this.updatePlayerInfo(firstSong);\r\n        } catch (e) {\r\n            console.error('Error decoding URL:', e);\r\n        }\r\n    }\r\n    toggleRandom() {\r\n        this.isRandom = !this.isRandom;\r\n        // Adicionar ou remover a classe 'active' no botão random\r\n        if (this.isRandom) {\r\n            this.randomButton.classList.add('active');\r\n        } else {\r\n            this.randomButton.classList.remove('active');\r\n        }\r\n    }\r\n    getRandomSong() {\r\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\r\n        let randomSong;\r\n        do {\r\n            randomSong = songs[Math.floor(Math.random() * songs.length)];\r\n        } while (randomSong === this.currentSong && songs.length > 1);\r\n        return randomSong;\r\n    }\r\n    getNextSong() {\r\n        if (this.isRandom) {\r\n            return this.getRandomSong();\r\n        }\r\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\r\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\r\n        return songs[currentIndex + 1] || (this.isLooping ? songs[0] : null);\r\n    }\r\n    getPreviousSong() {\r\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\r\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\r\n        return songs[currentIndex - 1] || (this.isLooping ? songs[songs.length - 1] : null);\r\n    }\r\n    play(songElement, playlistElement) {\r\n        try {\r\n            const encodedUrl = songElement.dataset.src;\r\n            const decodedUrl = atob(encodedUrl);\r\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\r\n                console.error('Invalid decoded URL:', decodedUrl);\r\n                return;\r\n            }\r\n            if (this.currentSong && this.currentSong !== songElement) {\r\n                this.currentSong.querySelector('.play-button').classList.remove('active');\r\n                this.currentSong.classList.remove('active');\r\n            }\r\n            if (this.audio.src !== decodedUrl) {\r\n                this.audio.src = decodedUrl;\r\n            }\r\n            this.audio.play();\r\n            this.isPlaying = true;\r\n            this.currentSong = songElement;\r\n            this.currentPlaylist = playlistElement;\r\n            this.updatePlayerInfo(songElement);\r\n            this.syncButtons(songElement);\r\n        } catch (e) {\r\n            console.error('Error playing song:', e);\r\n        }\r\n    }\r\n    pause(songElement = null) {\r\n        this.audio.pause();\r\n        this.isPlaying = false;\r\n        if (songElement) {\r\n            const playButton = songElement.querySelector('.play-button');\r\n            if (playButton) playButton.classList.remove('active');\r\n            songElement.classList.remove('active');\r\n        }\r\n        this.playPauseButton.classList.remove('active');\r\n    }\r\n    togglePlayPause() {\r\n        if (this.isPlaying) {\r\n            this.pause(this.currentSong);\r\n        } else {\r\n            this.audio.play();\r\n            this.isPlaying = true;\r\n            this.currentSong.querySelector('.play-button').classList.add('active');\r\n            this.currentSong.classList.add('active');\r\n            this.playPauseButton.classList.add('active');\r\n        }\r\n    }\r\n    toggleLoop() {\r\n        this.isLooping = !this.isLooping;\r\n        if (this.isLooping) {\r\n            this.loopButton.classList.add('active');\r\n        } else {\r\n            this.loopButton.classList.remove('active');\r\n        }\r\n    }\r\n    next() {\r\n        const nextSong = this.getNextSong();\r\n        if (nextSong) {\r\n            this.play(nextSong, this.currentPlaylist);\r\n        }\r\n    }\r\n    previous() {\r\n        if (this.audio.currentTime > 2) {\r\n            this.audio.currentTime = 0;\r\n        } else {\r\n            const previousSong = this.getPreviousSong();\r\n            if (previousSong) {\r\n                this.play(previousSong, this.currentPlaylist);\r\n            }\r\n        }\r\n    }\r\n    handleSongEnd() {\r\n        const nextSong = this.getNextSong();\r\n        if (nextSong) {\r\n            this.play(nextSong, this.currentPlaylist);\r\n        } else {\r\n            this.isPlaying = false;\r\n            this.audio.currentTime = 0;\r\n            this.syncButtons(null);\r\n        }\r\n    }\r\n    updatePlayerInfo(songElement) {\r\n        this.titleElement.textContent = songElement.querySelector('.title').textContent;\r\n        this.artistElement.textContent = songElement.querySelector('.artist').textContent;\r\n        this.timeElement.textContent = songElement.querySelector('.time').textContent;\r\n        //const genders = [...songElement.querySelectorAll('.genders li')].map(li => li.textContent);\r\n        //this.gendersElement.textContent = genders.join(', ');\r\n        const thumbSrc = songElement.querySelector('.thumb').src;\r\n        this.thumbElement.src = thumbSrc;\r\n    }\r\n    syncButtons(songElement) {\r\n        document.querySelectorAll('.play-button').forEach(button => button.classList.remove('active'));\r\n        document.querySelectorAll('.song').forEach(song => song.classList.remove('active'));\r\n\r\n        if (songElement) {\r\n            songElement.querySelector('.play-button').classList.add('active');\r\n            songElement.classList.add('active');\r\n            this.playPauseButton.classList.add('active');\r\n        } else {\r\n            this.playPauseButton.classList.remove('active');\r\n        }\r\n    }\r\n    updateProgressBar() {\r\n        const progress = (this.audio.currentTime / this.audio.duration) * 100;\r\n        this.progressBar.style.width = `${progress}%`;\r\n    }\r\n    seek(event) {\r\n        const rect = this.progressBarContainer.getBoundingClientRect();\r\n        const offsetX = event.clientX - rect.left;\r\n        const percentage = offsetX / rect.width;\r\n        this.audio.currentTime = percentage * this.audio.duration;\r\n    }\r\n    startDrag(event) {\r\n        const dragHandler = (e) => this.seek(e);\r\n        const stopDrag = () => {\r\n            document.removeEventListener('mousemove', dragHandler);\r\n            document.removeEventListener('mouseup', stopDrag);\r\n        };\r\n        document.addEventListener('mousemove', dragHandler);\r\n        document.addEventListener('mouseup', stopDrag);\r\n\r\n        this.seek(event);\r\n    }\r\n}    \r\n// Inicializar o player apenas se o elemento existir\r\nif (document.querySelector('#player-main')) {\r\n    \r\n    window.globalPlayer = new Player(); // Define como global\r\n\r\n    // Configurar eventos para as músicas\r\n    document.addEventListener('click', (event) => {\r\n        const playButton = event.target.closest('.play-button');\r\n        if (!playButton) return;\r\n\r\n        const song = playButton.closest('.song');\r\n        const playlist = playButton.closest('.playlist');\r\n        \r\n        if (!song || !playlist) return;\r\n\r\n        if (globalPlayer.currentSong === song && globalPlayer.isPlaying) {\r\n            globalPlayer.pause(song);\r\n        } else {\r\n            globalPlayer.play(song, playlist);\r\n        }\r\n    });\r\n}","function handleDownload(event) {\r\n    fetch(`${wpApiSettings.root}soniica/v1/register-download`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'X-WP-Nonce': wpApiSettings.nonce,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'same-origin'\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        if (!data.success) {\r\n            event.preventDefault();\r\n            alert(data.message);\r\n            return false;\r\n        } else {\r\n            // Atualiza o estado de todos os botões de download para usuários não premium\r\n            if (!data.is_premium) {\r\n                document.querySelectorAll('.download-link').forEach(downloadLink => {\r\n                    downloadLink.classList.add('download-blocked');\r\n                    downloadLink.setAttribute('title', 'You have reached the download limit on free plan today.');\r\n                    //downloadLink.textContent = 'Download indisponível';\r\n                    downloadLink.setAttribute('href', '/get-premium');\r\n                    downloadLink.removeAttribute('download');\r\n                });\r\n            }\r\n        }\r\n    })\r\n    .catch(error => {\r\n        console.error('Erro:', error);\r\n        event.preventDefault();\r\n        return false;\r\n    });\r\n\r\n    return true;\r\n}\r\n\r\nconst playerDownloadButtons = document.querySelectorAll('.download-link');\r\n\r\nfunction isBase64(str) {\r\n    try {\r\n        return btoa(atob(str)) === str;\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n}\r\n\r\nconst PlayerManager = (function () {\r\n    let instance = null;\r\n\r\n    return {\r\n        getInstance: function () {\r\n            if (!instance) {\r\n                instance = new Player();\r\n            }\r\n            return instance;\r\n        }\r\n    };\r\n})();\r\n\r\nfunction stopGlobalPlayer() {\r\n    if (window.globalPlayer && window.globalPlayer.currentSong) {\r\n        window.globalPlayer.pause(window.globalPlayer.currentSong);\r\n    }\r\n}\r\n\r\n\r\n\r\nplayerDownloadButtons.forEach((button) => {\r\n    button.addEventListener('click', (event) => {\r\n        event.preventDefault();\r\n\r\n        let encodedDownloadLink = button.getAttribute(\"href\");\r\n        let decodedLink = '';\r\n\r\n        // Verifica se a string é Base64 válida antes de decodificar\r\n        if (isBase64(encodedDownloadLink)) {\r\n            // se for base64, decodifica\r\n            decodedLink = atob(encodedDownloadLink);\r\n        } else {\r\n            // se não for, usa o link normal\r\n            decodedLink = encodedDownloadLink;\r\n \r\n            window.location.href = decodedLink;\r\n            return;\r\n        }\r\n\r\n        if (!button.classList.contains('download-blocked')) {\r\n            window.open(decodedLink, '_blank');\r\n        } else {\r\n            console.log('deu ruim');\r\n        }\r\n    });\r\n});\r\n\r\nwindow.addEventListener('beforeunload', function(event) {\r\n    stopGlobalPlayer();\r\n});\r\n","\r\n    const userAvatar = document.querySelector(\".user-avatar\");\r\n    const userSubMenu = document.querySelector(\".user-sub-menu\");\r\n\r\n    if (userAvatar && userSubMenu) {\r\n        userAvatar.addEventListener(\"click\", function (event) {\r\n            userSubMenu.classList.toggle(\"active\");\r\n        });\r\n\r\n        document.addEventListener(\"click\", function (event) {\r\n            if (!userAvatar.contains(event.target) && !userSubMenu.contains(event.target)) {\r\n                userSubMenu.classList.remove(\"active\");\r\n            }\r\n        });\r\n    }\r\n"]}