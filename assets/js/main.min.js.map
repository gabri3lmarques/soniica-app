{"version":3,"sources":["accordion/accordion.js","flash-message/flash-message.js","player/player.js","song/song.js","top-menu/top-menu.js"],"names":["AccordionMenu","constructor","this","accordionItems","document","querySelectorAll","init","forEach","item","querySelector","addEventListener","currentItem","isActive","classList","contains","remove","style","maxHeight","add","content","scrollHeight","let","fm_close","modal","display","Player","audio","Audio","currentSong","currentPlaylist","isPlaying","isLooping","isRandom","titleElement","artistElement","timeElement","gendersElement","thumbElement","playPauseButton","nextButton","previousButton","loopButton","randomButton","progressBarContainer","progressBar","volumeSlider","togglePlayPause","next","previous","toggleLoop","toggleRandom","updateProgressBar","handleSongEnd","adjustVolume","e","seek","startDrag","initializeFirstSong","volume","value","event","newVolume","target","rightVolume","leftVolume","background","firstPlaylist","firstSong","encodedUrl","dataset","src","decodedUrl","atob","startsWith","updatePlayerInfo","console","error","getRandomSong","songs","randomSong","Math","floor","random","length","getNextSong","currentIndex","findIndex","song","getPreviousSong","play","songElement","playlistElement","syncButtons","pause","playButton","nextSong","previousSong","currentTime","textContent","thumbSrc","button","progress","duration","width","rect","getBoundingClientRect","offsetX","clientX","left","dragHandler","stopDrag","removeEventListener","handleDownload","fetch","wpApiSettings","root","method","headers","X-WP-Nonce","nonce","Content-Type","credentials","then","response","json","data","success","preventDefault","alert","message","is_premium","downloadLink","setAttribute","removeAttribute","catch","window","globalPlayer","closest","playlist","playerDownloadButtons","isBase64","str","btoa","PlayerManager","instance","getInstance","stopGlobalPlayer","encodedDownloadLink","getAttribute","decodedLink","log","open","location","href","userAvatar","userSubMenu","toggle"],"mappings":"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","file":"main.min.js","sourcesContent":["class AccordionMenu {\n    constructor() {\n        this.accordionItems = document.querySelectorAll('.accordion-item');\n        this.init();\n    }\n\n    init() {\n        this.accordionItems.forEach(item => {\n            const header = item.querySelector('.accordion-header');\n            \n            header.addEventListener('click', () => {\n                const currentItem = item;\n                const isActive = currentItem.classList.contains('active');\n                \n                // Fecha todos os itens\n                this.accordionItems.forEach(item => {\n                    item.classList.remove('active');\n                    const content = item.querySelector('.accordion-content');\n                    content.style.maxHeight = null;\n                });\n                \n                // Abre o item atual se não estava ativo\n                if (!isActive) {\n                    currentItem.classList.add('active');\n                    const content = currentItem.querySelector('.accordion-content');\n                    content.style.maxHeight = content.scrollHeight + \"px\";\n                }\n            });\n        });\n    }\n}\n\n// Inicializa o accordion quando o DOM estiver pronto\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (document.querySelector('.accordion-item')) {\n        new AccordionMenu();\n    }\n});","let fm_close = document.querySelector('.fm-close');\nlet modal = document.querySelector('.flash-message-overlay');\n\nif(fm_close ){\n    fm_close.addEventListener('click', function() {\n        modal.style.display = 'none';\n    });\n}\n","class Player {\n    constructor() {\n        this.audio = new Audio();\n        this.currentSong = null;\n        this.currentPlaylist = null;\n        this.isPlaying = false;\n        this.isLooping = false; // Estado do loop\n        this.isRandom = false; // Estado do random\n        // Elementos do player principal\n        this.titleElement = document.querySelector('.current-title');\n        this.artistElement = document.querySelector('.current-artist');\n        this.timeElement = document.querySelector('.current-time');\n        this.gendersElement = document.querySelector('.current-genders');\n        this.thumbElement = document.querySelector('.current-thumb');\n        this.playPauseButton = document.querySelector('.play-pause');\n        this.nextButton = document.querySelector('.next');\n        this.previousButton = document.querySelector('.previous');\n        this.loopButton = document.querySelector('.loop');\n        this.randomButton = document.querySelector('.random'); // Botão de random\n        this.progressBarContainer = document.querySelector('.progress-bar-container');\n        this.progressBar = document.querySelector('.progress-bar');\n        this.volumeSlider = document.querySelector('#volume-slider'); // Slider de volume\n        // Event listeners\n        this.playPauseButton.addEventListener('click', () => this.togglePlayPause());\n        this.nextButton.addEventListener('click', () => this.next());\n        this.previousButton.addEventListener('click', () => this.previous());\n        this.loopButton.addEventListener('click', () => this.toggleLoop());\n        this.randomButton.addEventListener('click', () => this.toggleRandom());\n        this.audio.addEventListener('timeupdate', () => this.updateProgressBar());\n        this.audio.addEventListener('ended', () => this.handleSongEnd());\n        this.volumeSlider.addEventListener('input', (e) => this.adjustVolume(e));\n        // Eventos para a barra de progresso\n        this.progressBarContainer.addEventListener('click', (e) => this.seek(e));\n        this.progressBarContainer.addEventListener('mousedown', (e) => this.startDrag(e));\n        // Inicializar a primeira música automaticamente\n        this.initializeFirstSong();\n        this.audio.volume = this.volumeSlider.value;\n    }\n    adjustVolume(event) {\n        // Ajustar o volume do elemento de áudio com base no slider\n        const newVolume = event.target.value;\n        const rightVolume = newVolume * 100;\n        const leftVolume = 100 - rightVolume;\n        this.audio.volume = newVolume;\n        this.volumeSlider.style.background = `linear-gradient(to right, #708303, #e9ff70 ${rightVolume}%, #272727 ${leftVolume}%)`;\n    }\n    initializeFirstSong() {\n        const firstPlaylist = document.querySelector('.playlist');\n        if (!firstPlaylist) return;\n        const firstSong = firstPlaylist.querySelector('.song');\n        if (!firstSong) return;\n        this.currentPlaylist = firstPlaylist;\n        this.currentSong = firstSong;\n        // Fix: songElement was undefined, should use firstSong\n        const encodedUrl = firstSong.dataset.src;\n        try {\n            const decodedUrl = atob(encodedUrl);\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                console.error('Invalid decoded URL:', decodedUrl);\n                return;\n            }\n            this.audio.src = decodedUrl;\n            this.updatePlayerInfo(firstSong);\n        } catch (e) {\n            console.error('Error decoding URL:', e);\n        }\n    }\n    toggleRandom() {\n        this.isRandom = !this.isRandom;\n        // Adicionar ou remover a classe 'active' no botão random\n        if (this.isRandom) {\n            this.randomButton.classList.add('active');\n        } else {\n            this.randomButton.classList.remove('active');\n        }\n    }\n    getRandomSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        let randomSong;\n        do {\n            randomSong = songs[Math.floor(Math.random() * songs.length)];\n        } while (randomSong === this.currentSong && songs.length > 1);\n        return randomSong;\n    }\n    getNextSong() {\n        if (this.isRandom) {\n            return this.getRandomSong();\n        }\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex + 1] || (this.isLooping ? songs[0] : null);\n    }\n    getPreviousSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex - 1] || (this.isLooping ? songs[songs.length - 1] : null);\n    }\n    play(songElement, playlistElement) {\n        try {\n            const encodedUrl = songElement.dataset.src;\n            const decodedUrl = atob(encodedUrl);\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                console.error('Invalid decoded URL:', decodedUrl);\n                return;\n            }\n            if (this.currentSong && this.currentSong !== songElement) {\n                this.currentSong.querySelector('.play-button').classList.remove('active');\n                this.currentSong.classList.remove('active');\n            }\n            if (this.audio.src !== decodedUrl) {\n                this.audio.src = decodedUrl;\n            }\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong = songElement;\n            this.currentPlaylist = playlistElement;\n            this.updatePlayerInfo(songElement);\n            this.syncButtons(songElement);\n        } catch (e) {\n            console.error('Error playing song:', e);\n        }\n    }\n    pause(songElement = null) {\n        this.audio.pause();\n        this.isPlaying = false;\n        if (songElement) {\n            const playButton = songElement.querySelector('.play-button');\n            if (playButton) playButton.classList.remove('active');\n            songElement.classList.remove('active');\n        }\n        this.playPauseButton.classList.remove('active');\n    }\n    togglePlayPause() {\n        if (this.isPlaying) {\n            this.pause(this.currentSong);\n        } else {\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong.querySelector('.play-button').classList.add('active');\n            this.currentSong.classList.add('active');\n            this.playPauseButton.classList.add('active');\n        }\n    }\n    toggleLoop() {\n        this.isLooping = !this.isLooping;\n        if (this.isLooping) {\n            this.loopButton.classList.add('active');\n        } else {\n            this.loopButton.classList.remove('active');\n        }\n    }\n    next() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        }\n    }\n    previous() {\n        if (this.audio.currentTime > 2) {\n            this.audio.currentTime = 0;\n        } else {\n            const previousSong = this.getPreviousSong();\n            if (previousSong) {\n                this.play(previousSong, this.currentPlaylist);\n            }\n        }\n    }\n    handleSongEnd() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        } else {\n            this.isPlaying = false;\n            this.audio.currentTime = 0;\n            this.syncButtons(null);\n        }\n    }\n    updatePlayerInfo(songElement) {\n        this.titleElement.textContent = songElement.querySelector('.title').textContent;\n        this.artistElement.textContent = songElement.querySelector('.artist').textContent;\n        this.timeElement.textContent = songElement.querySelector('.time').textContent;\n        //const genders = [...songElement.querySelectorAll('.genders li')].map(li => li.textContent);\n        //this.gendersElement.textContent = genders.join(', ');\n        const thumbSrc = songElement.querySelector('.thumb').src;\n        this.thumbElement.src = thumbSrc;\n    }\n    syncButtons(songElement) {\n        document.querySelectorAll('.play-button').forEach(button => button.classList.remove('active'));\n        document.querySelectorAll('.song').forEach(song => song.classList.remove('active'));\n\n        if (songElement) {\n            songElement.querySelector('.play-button').classList.add('active');\n            songElement.classList.add('active');\n            this.playPauseButton.classList.add('active');\n        } else {\n            this.playPauseButton.classList.remove('active');\n        }\n    }\n    updateProgressBar() {\n        const progress = (this.audio.currentTime / this.audio.duration) * 100;\n        this.progressBar.style.width = `${progress}%`;\n    }\n    seek(event) {\n        const rect = this.progressBarContainer.getBoundingClientRect();\n        const offsetX = event.clientX - rect.left;\n        const percentage = offsetX / rect.width;\n        this.audio.currentTime = percentage * this.audio.duration;\n    }\n    startDrag(event) {\n        const dragHandler = (e) => this.seek(e);\n        const stopDrag = () => {\n            document.removeEventListener('mousemove', dragHandler);\n            document.removeEventListener('mouseup', stopDrag);\n        };\n        document.addEventListener('mousemove', dragHandler);\n        document.addEventListener('mouseup', stopDrag);\n\n        this.seek(event);\n    }\n}    \n// Inicializar o player apenas se o elemento existir\nif (document.querySelector('#player-main')) {\n    \n    window.globalPlayer = new Player(); // Define como global\n\n    // Configurar eventos para as músicas\n    document.addEventListener('click', (event) => {\n        const playButton = event.target.closest('.play-button');\n        if (!playButton) return;\n\n        const song = playButton.closest('.song');\n        const playlist = playButton.closest('.playlist');\n        \n        if (!song || !playlist) return;\n\n        if (globalPlayer.currentSong === song && globalPlayer.isPlaying) {\n            globalPlayer.pause(song);\n        } else {\n            globalPlayer.play(song, playlist);\n        }\n    });\n}","function handleDownload(event) {\n    fetch(`${wpApiSettings.root}soniica/v1/register-download`, {\n        method: 'POST',\n        headers: {\n            'X-WP-Nonce': wpApiSettings.nonce,\n            'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (!data.success) {\n            event.preventDefault();\n            alert(data.message);\n            return false;\n        } else {\n            // Atualiza o estado de todos os botões de download para usuários não premium\n            if (!data.is_premium) {\n                document.querySelectorAll('.download-link').forEach(downloadLink => {\n                    downloadLink.classList.add('download-blocked');\n                    downloadLink.setAttribute('title', 'You have reached the download limit on free plan today.');\n                    //downloadLink.textContent = 'Download indisponível';\n                    downloadLink.setAttribute('href', '/get-premium');\n                    downloadLink.removeAttribute('download');\n                });\n            }\n        }\n    })\n    .catch(error => {\n        console.error('Erro:', error);\n        event.preventDefault();\n        return false;\n    });\n\n    return true;\n}\n\nconst playerDownloadButtons = document.querySelectorAll('.download-link');\n\nfunction isBase64(str) {\n    try {\n        return btoa(atob(str)) === str;\n    } catch (e) {\n        return false;\n    }\n}\n\nconst PlayerManager = (function () {\n    let instance = null;\n\n    return {\n        getInstance: function () {\n            if (!instance) {\n                instance = new Player();\n            }\n            return instance;\n        }\n    };\n})();\n\nfunction stopGlobalPlayer() {\n    if (window.globalPlayer && window.globalPlayer.currentSong) {\n        window.globalPlayer.pause(window.globalPlayer.currentSong);\n    }\n}\n\n\n\nplayerDownloadButtons.forEach((button) => {\n    button.addEventListener('click', (event) => {\n        event.preventDefault();\n\n        let encodedDownloadLink = button.getAttribute(\"href\");\n        let decodedLink = '';\n\n        // Verifica se a string é Base64 válida antes de decodificar\n        if (isBase64(encodedDownloadLink)) {\n            // se for base64, decodifica\n            decodedLink = atob(encodedDownloadLink);\n        } else {\n            // se não for, usa o link normal\n            decodedLink = encodedDownloadLink;\n \n            window.location.href = decodedLink;\n            return;\n        }\n\n        if (!button.classList.contains('download-blocked')) {\n            window.open(decodedLink, '_blank');\n        } else {\n            console.log('deu ruim');\n        }\n    });\n});\n\nwindow.addEventListener('beforeunload', function(event) {\n    stopGlobalPlayer();\n});\n","\n    const userAvatar = document.querySelector(\".user-avatar\");\n    const userSubMenu = document.querySelector(\".user-sub-menu\");\n\n    if (userAvatar && userSubMenu) {\n        userAvatar.addEventListener(\"click\", function (event) {\n            userSubMenu.classList.toggle(\"active\");\n        });\n\n        document.addEventListener(\"click\", function (event) {\n            if (!userAvatar.contains(event.target) && !userSubMenu.contains(event.target)) {\n                userSubMenu.classList.remove(\"active\");\n            }\n        });\n    }\n"]}