{"version":3,"sources":["flash-message/flash-message.js","accordion/accordion.js","song/song.js","player/player.js","top-menu/top-menu.js"],"names":["console","log","AccordionMenu","constructor","this","accordionItems","document","querySelectorAll","init","forEach","item","querySelector","addEventListener","currentItem","isActive","classList","contains","remove","style","maxHeight","add","content","scrollHeight","handleDownload","event","fetch","wpApiSettings","root","method","headers","X-WP-Nonce","nonce","Content-Type","credentials","then","response","json","data","success","preventDefault","alert","message","is_premium","downloadLink","setAttribute","textContent","removeAttribute","cursor","catch","error","playerDownloadButtons","isBase64","str","btoa","atob","e","PlayerManager","let","instance","getInstance","Player","stopGlobalPlayer","window","globalPlayer","currentSong","pause","button","encodedDownloadLink","getAttribute","decodedLink","open","location","href","audio","Audio","currentPlaylist","isPlaying","isLooping","isRandom","titleElement","artistElement","timeElement","gendersElement","thumbElement","playPauseButton","nextButton","previousButton","loopButton","randomButton","progressBarContainer","progressBar","volumeSlider","togglePlayPause","next","previous","toggleLoop","toggleRandom","updateProgressBar","handleSongEnd","adjustVolume","seek","startDrag","initializeFirstSong","volume","value","newVolume","target","rightVolume","leftVolume","background","firstPlaylist","firstSong","encodedUrl","dataset","src","decodedUrl","startsWith","updatePlayerInfo","getRandomSong","songs","randomSong","Math","floor","random","length","getNextSong","currentIndex","findIndex","song","getPreviousSong","play","songElement","playlistElement","syncButtons","playButton","nextSong","previousSong","currentTime","thumbSrc","progress","duration","width","rect","getBoundingClientRect","offsetX","clientX","left","dragHandler","stopDrag","removeEventListener","closest","playlist","userAvatar","userSubMenu","toggle"],"mappings":"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","file":"main.min.js","sourcesContent":["console.log(\"flase message \");","class AccordionMenu {\n    constructor() {\n        this.accordionItems = document.querySelectorAll('.accordion-item');\n        this.init();\n    }\n\n    init() {\n        this.accordionItems.forEach(item => {\n            const header = item.querySelector('.accordion-header');\n            \n            header.addEventListener('click', () => {\n                const currentItem = item;\n                const isActive = currentItem.classList.contains('active');\n                \n                // Fecha todos os itens\n                this.accordionItems.forEach(item => {\n                    item.classList.remove('active');\n                    const content = item.querySelector('.accordion-content');\n                    content.style.maxHeight = null;\n                });\n                \n                // Abre o item atual se não estava ativo\n                if (!isActive) {\n                    currentItem.classList.add('active');\n                    const content = currentItem.querySelector('.accordion-content');\n                    content.style.maxHeight = content.scrollHeight + \"px\";\n                }\n            });\n        });\n    }\n}\n\n// Inicializa o accordion quando o DOM estiver pronto\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (document.querySelector('.accordion-item')) {\n        new AccordionMenu();\n    }\n});","function handleDownload(event) {\n    fetch(`${wpApiSettings.root}soniica/v1/register-download`, {\n        method: 'POST',\n        headers: {\n            'X-WP-Nonce': wpApiSettings.nonce,\n            'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (!data.success) {\n            event.preventDefault();\n            alert(data.message);\n            return false;\n        } else {\n            // Atualiza o estado de todos os botões de download para usuários não premium\n            if (!data.is_premium) {\n                document.querySelectorAll('.download-link').forEach(downloadLink => {\n                    downloadLink.classList.add('download-blocked');\n                    downloadLink.setAttribute('title', 'Aguarde 24 horas para fazer outro download.');\n                    downloadLink.textContent = 'Download indisponível';\n                    downloadLink.removeAttribute('href');\n                    downloadLink.removeAttribute('download');\n                    downloadLink.style.cursor = 'not-allowed';\n                });\n            }\n        }\n    })\n    .catch(error => {\n        console.error('Erro:', error);\n        event.preventDefault();\n        return false;\n    });\n\n    return true;\n}\n\nconst playerDownloadButtons = document.querySelectorAll('.download-link');\n\nfunction isBase64(str) {\n    try {\n        return btoa(atob(str)) === str;\n    } catch (e) {\n        return false;\n    }\n}\n\nconst PlayerManager = (function () {\n    let instance = null;\n\n    return {\n        getInstance: function () {\n            if (!instance) {\n                instance = new Player();\n            }\n            return instance;\n        }\n    };\n})();\n\nfunction stopGlobalPlayer() {\n    if (window.globalPlayer && window.globalPlayer.currentSong) {\n        window.globalPlayer.pause(window.globalPlayer.currentSong);\n    }\n}\n\n\n\nplayerDownloadButtons.forEach((button) => {\n    button.addEventListener('click', (event) => {\n        event.preventDefault();\n\n        let encodedDownloadLink = button.getAttribute(\"href\");\n        let decodedLink = '';\n\n        // Verifica se a string é Base64 válida antes de decodificar\n        if (isBase64(encodedDownloadLink)) {\n            // se for base64, decodifica\n            decodedLink = atob(encodedDownloadLink);\n        } else {\n            // se não for, usa o link normal\n            decodedLink = encodedDownloadLink;\n \n            window.location.href = decodedLink;\n            return;\n        }\n\n        if (!button.classList.contains('download-blocked')) {\n            window.open(decodedLink, '_blank');\n        } else {\n            console.log('deu ruim');\n        }\n    });\n});\n\nwindow.addEventListener('beforeunload', function(event) {\n    stopGlobalPlayer();\n});\n","class Player {\n    constructor() {\n        this.audio = new Audio();\n        this.currentSong = null;\n        this.currentPlaylist = null;\n        this.isPlaying = false;\n        this.isLooping = false; // Estado do loop\n        this.isRandom = false; // Estado do random\n\n        // Elementos do player principal\n        this.titleElement = document.querySelector('.current-title');\n        this.artistElement = document.querySelector('.current-artist');\n        this.timeElement = document.querySelector('.current-time');\n        this.gendersElement = document.querySelector('.current-genders');\n        this.thumbElement = document.querySelector('.current-thumb');\n        this.playPauseButton = document.querySelector('.play-pause');\n        this.nextButton = document.querySelector('.next');\n        this.previousButton = document.querySelector('.previous');\n        this.loopButton = document.querySelector('.loop');\n        this.randomButton = document.querySelector('.random'); // Botão de random\n        this.progressBarContainer = document.querySelector('.progress-bar-container');\n        this.progressBar = document.querySelector('.progress-bar');\n        this.volumeSlider = document.querySelector('#volume-slider'); // Slider de volume\n    \n       \n\n        // Event listeners\n        this.playPauseButton.addEventListener('click', () => this.togglePlayPause());\n        this.nextButton.addEventListener('click', () => this.next());\n        this.previousButton.addEventListener('click', () => this.previous());\n        this.loopButton.addEventListener('click', () => this.toggleLoop());\n        this.randomButton.addEventListener('click', () => this.toggleRandom());\n        this.audio.addEventListener('timeupdate', () => this.updateProgressBar());\n        this.audio.addEventListener('ended', () => this.handleSongEnd());\n        this.volumeSlider.addEventListener('input', (e) => this.adjustVolume(e));\n\n        // Eventos para a barra de progresso\n        this.progressBarContainer.addEventListener('click', (e) => this.seek(e));\n        this.progressBarContainer.addEventListener('mousedown', (e) => this.startDrag(e));\n\n        // Inicializar a primeira música automaticamente\n        this.initializeFirstSong();\n        \n        this.audio.volume = this.volumeSlider.value;\n    }\n    \n    adjustVolume(event) {\n        // Ajustar o volume do elemento de áudio com base no slider\n        const newVolume = event.target.value;\n        const rightVolume = newVolume * 100;\n        const leftVolume = 100 - rightVolume;\n\n        this.audio.volume = newVolume;\n        \n        this.volumeSlider.style.background = `linear-gradient(to right, #708303, #e9ff70 ${rightVolume}%, #272727 ${leftVolume}%)`;\n    }\n\n    initializeFirstSong() {\n        const firstPlaylist = document.querySelector('.playlist');\n        if (!firstPlaylist) return;\n\n        const firstSong = firstPlaylist.querySelector('.song');\n        if (!firstSong) return;\n\n        this.currentPlaylist = firstPlaylist;\n        this.currentSong = firstSong;\n        \n        // Fix: songElement was undefined, should use firstSong\n        const encodedUrl = firstSong.dataset.src;\n        \n        try {\n            const decodedUrl = atob(encodedUrl);\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                console.error('Invalid decoded URL:', decodedUrl);\n                return;\n            }\n            \n            this.audio.src = decodedUrl;\n            this.updatePlayerInfo(firstSong);\n\n        } catch (e) {\n            console.error('Error decoding URL:', e);\n        }\n    }\n\n    toggleRandom() {\n        this.isRandom = !this.isRandom;\n\n        // Adicionar ou remover a classe 'active' no botão random\n        if (this.isRandom) {\n            this.randomButton.classList.add('active');\n        } else {\n            this.randomButton.classList.remove('active');\n        }\n    }\n\n    getRandomSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        let randomSong;\n\n        do {\n            randomSong = songs[Math.floor(Math.random() * songs.length)];\n        } while (randomSong === this.currentSong && songs.length > 1);\n\n        return randomSong;\n    }\n\n    getNextSong() {\n        if (this.isRandom) {\n            return this.getRandomSong();\n        }\n\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex + 1] || (this.isLooping ? songs[0] : null);\n    }\n\n    getPreviousSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex - 1] || (this.isLooping ? songs[songs.length - 1] : null);\n    }\n\n    play(songElement, playlistElement) {\n        try {\n            const encodedUrl = songElement.dataset.src;\n            const decodedUrl = atob(encodedUrl);\n\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                console.error('Invalid decoded URL:', decodedUrl);\n                return;\n            }\n\n            if (this.currentSong && this.currentSong !== songElement) {\n                this.currentSong.querySelector('.play-button').classList.remove('active');\n                this.currentSong.classList.remove('active');\n            }\n\n            if (this.audio.src !== decodedUrl) {\n                this.audio.src = decodedUrl;\n            }\n\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong = songElement;\n            this.currentPlaylist = playlistElement;\n\n            this.updatePlayerInfo(songElement);\n            this.syncButtons(songElement);\n        } catch (e) {\n            console.error('Error playing song:', e);\n        }\n    }\n\n    pause(songElement = null) {\n        this.audio.pause();\n        this.isPlaying = false;\n    \n        if (songElement) {\n            const playButton = songElement.querySelector('.play-button');\n            if (playButton) playButton.classList.remove('active');\n            songElement.classList.remove('active');\n        }\n    \n        this.playPauseButton.classList.remove('active');\n    }\n\n    togglePlayPause() {\n        if (this.isPlaying) {\n            this.pause(this.currentSong);\n        } else {\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong.querySelector('.play-button').classList.add('active');\n            this.currentSong.classList.add('active');\n            this.playPauseButton.classList.add('active');\n        }\n    }\n\n    toggleLoop() {\n        this.isLooping = !this.isLooping;\n\n        if (this.isLooping) {\n            this.loopButton.classList.add('active');\n        } else {\n            this.loopButton.classList.remove('active');\n        }\n    }\n\n    next() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        }\n    }\n\n    previous() {\n        if (this.audio.currentTime > 2) {\n            this.audio.currentTime = 0;\n        } else {\n            const previousSong = this.getPreviousSong();\n            if (previousSong) {\n                this.play(previousSong, this.currentPlaylist);\n            }\n        }\n    }\n\n    handleSongEnd() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        } else {\n            this.isPlaying = false;\n            this.audio.currentTime = 0;\n            this.syncButtons(null);\n        }\n    }\n\n    updatePlayerInfo(songElement) {\n        this.titleElement.textContent = songElement.querySelector('.title').textContent;\n        this.artistElement.textContent = songElement.querySelector('.artist').textContent;\n        this.timeElement.textContent = songElement.querySelector('.time').textContent;\n\n        //const genders = [...songElement.querySelectorAll('.genders li')].map(li => li.textContent);\n        //this.gendersElement.textContent = genders.join(', ');\n\n        const thumbSrc = songElement.querySelector('.thumb').src;\n        this.thumbElement.src = thumbSrc;\n    }\n\n    syncButtons(songElement) {\n        document.querySelectorAll('.play-button').forEach(button => button.classList.remove('active'));\n        document.querySelectorAll('.song').forEach(song => song.classList.remove('active'));\n\n        if (songElement) {\n            songElement.querySelector('.play-button').classList.add('active');\n            songElement.classList.add('active');\n            this.playPauseButton.classList.add('active');\n        } else {\n            this.playPauseButton.classList.remove('active');\n        }\n    }\n\n    updateProgressBar() {\n        const progress = (this.audio.currentTime / this.audio.duration) * 100;\n        this.progressBar.style.width = `${progress}%`;\n    }\n\n    seek(event) {\n        const rect = this.progressBarContainer.getBoundingClientRect();\n        const offsetX = event.clientX - rect.left;\n        const percentage = offsetX / rect.width;\n        this.audio.currentTime = percentage * this.audio.duration;\n    }\n\n    startDrag(event) {\n        const dragHandler = (e) => this.seek(e);\n        const stopDrag = () => {\n            document.removeEventListener('mousemove', dragHandler);\n            document.removeEventListener('mouseup', stopDrag);\n        };\n\n        document.addEventListener('mousemove', dragHandler);\n        document.addEventListener('mouseup', stopDrag);\n\n        this.seek(event);\n    }\n}    \n\n\n// Inicializar o player apenas se o elemento existir\nif (document.querySelector('#player-main')) {\n    \n    window.globalPlayer = new Player(); // Define como global\n\n    // Configurar eventos para as músicas\n    document.addEventListener('click', (event) => {\n        const playButton = event.target.closest('.play-button');\n        if (!playButton) return;\n\n        const song = playButton.closest('.song');\n        const playlist = playButton.closest('.playlist');\n        \n        if (!song || !playlist) return;\n\n        if (globalPlayer.currentSong === song && globalPlayer.isPlaying) {\n            globalPlayer.pause(song);\n        } else {\n            globalPlayer.play(song, playlist);\n        }\n    });\n}","\n    const userAvatar = document.querySelector(\".user-avatar\");\n    const userSubMenu = document.querySelector(\".user-sub-menu\");\n\n    if (userAvatar && userSubMenu) {\n        userAvatar.addEventListener(\"click\", function (event) {\n            userSubMenu.classList.toggle(\"active\");\n        });\n\n        document.addEventListener(\"click\", function (event) {\n            if (!userAvatar.contains(event.target) && !userSubMenu.contains(event.target)) {\n                userSubMenu.classList.remove(\"active\");\n            }\n        });\n    }\n"]}