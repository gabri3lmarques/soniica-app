{"version":3,"sources":["flash-message/flash-message.js","accordion/accordion.js","player/player.js","song/song.js","top-menu/top-menu.js"],"names":["console","log","AccordionMenu","constructor","this","accordionItems","document","querySelectorAll","init","forEach","item","querySelector","addEventListener","currentItem","isActive","classList","contains","remove","style","maxHeight","add","content","scrollHeight","Player","audio","Audio","currentSong","currentPlaylist","isPlaying","isLooping","isRandom","titleElement","artistElement","timeElement","gendersElement","thumbElement","playPauseButton","nextButton","previousButton","loopButton","randomButton","progressBarContainer","progressBar","volumeSlider","togglePlayPause","next","previous","toggleLoop","toggleRandom","updateProgressBar","handleSongEnd","adjustVolume","e","seek","startDrag","initializeFirstSong","volume","value","event","newVolume","target","rightVolume","leftVolume","background","firstPlaylist","firstSong","encodedUrl","dataset","src","decodedUrl","atob","startsWith","updatePlayerInfo","error","getRandomSong","songs","let","randomSong","Math","floor","random","length","getNextSong","currentIndex","findIndex","song","getPreviousSong","play","songElement","playlistElement","syncButtons","pause","playButton","nextSong","previousSong","currentTime","textContent","thumbSrc","button","progress","duration","width","rect","getBoundingClientRect","offsetX","clientX","left","dragHandler","stopDrag","removeEventListener","handleDownload","fetch","wpApiSettings","root","method","headers","X-WP-Nonce","nonce","Content-Type","credentials","then","response","json","data","success","preventDefault","alert","message","is_premium","downloadLink","setAttribute","removeAttribute","catch","window","globalPlayer","closest","playlist","playerDownloadButtons","isBase64","str","btoa","PlayerManager","instance","getInstance","stopGlobalPlayer","encodedDownloadLink","getAttribute","decodedLink","open","location","href","userAvatar","userSubMenu","toggle"],"mappings":"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","file":"main.min.js","sourcesContent":["console.log(\"flase message \");","class AccordionMenu {\n    constructor() {\n        this.accordionItems = document.querySelectorAll('.accordion-item');\n        this.init();\n    }\n\n    init() {\n        this.accordionItems.forEach(item => {\n            const header = item.querySelector('.accordion-header');\n            \n            header.addEventListener('click', () => {\n                const currentItem = item;\n                const isActive = currentItem.classList.contains('active');\n                \n                // Fecha todos os itens\n                this.accordionItems.forEach(item => {\n                    item.classList.remove('active');\n                    const content = item.querySelector('.accordion-content');\n                    content.style.maxHeight = null;\n                });\n                \n                // Abre o item atual se não estava ativo\n                if (!isActive) {\n                    currentItem.classList.add('active');\n                    const content = currentItem.querySelector('.accordion-content');\n                    content.style.maxHeight = content.scrollHeight + \"px\";\n                }\n            });\n        });\n    }\n}\n\n// Inicializa o accordion quando o DOM estiver pronto\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (document.querySelector('.accordion-item')) {\n        new AccordionMenu();\n    }\n});","class Player {\n    constructor() {\n        this.audio = new Audio();\n        this.currentSong = null;\n        this.currentPlaylist = null;\n        this.isPlaying = false;\n        this.isLooping = false; // Estado do loop\n        this.isRandom = false; // Estado do random\n        // Elementos do player principal\n        this.titleElement = document.querySelector('.current-title');\n        this.artistElement = document.querySelector('.current-artist');\n        this.timeElement = document.querySelector('.current-time');\n        this.gendersElement = document.querySelector('.current-genders');\n        this.thumbElement = document.querySelector('.current-thumb');\n        this.playPauseButton = document.querySelector('.play-pause');\n        this.nextButton = document.querySelector('.next');\n        this.previousButton = document.querySelector('.previous');\n        this.loopButton = document.querySelector('.loop');\n        this.randomButton = document.querySelector('.random'); // Botão de random\n        this.progressBarContainer = document.querySelector('.progress-bar-container');\n        this.progressBar = document.querySelector('.progress-bar');\n        this.volumeSlider = document.querySelector('#volume-slider'); // Slider de volume\n        // Event listeners\n        this.playPauseButton.addEventListener('click', () => this.togglePlayPause());\n        this.nextButton.addEventListener('click', () => this.next());\n        this.previousButton.addEventListener('click', () => this.previous());\n        this.loopButton.addEventListener('click', () => this.toggleLoop());\n        this.randomButton.addEventListener('click', () => this.toggleRandom());\n        this.audio.addEventListener('timeupdate', () => this.updateProgressBar());\n        this.audio.addEventListener('ended', () => this.handleSongEnd());\n        this.volumeSlider.addEventListener('input', (e) => this.adjustVolume(e));\n        // Eventos para a barra de progresso\n        this.progressBarContainer.addEventListener('click', (e) => this.seek(e));\n        this.progressBarContainer.addEventListener('mousedown', (e) => this.startDrag(e));\n        // Inicializar a primeira música automaticamente\n        this.initializeFirstSong();\n        this.audio.volume = this.volumeSlider.value;\n    }\n    adjustVolume(event) {\n        // Ajustar o volume do elemento de áudio com base no slider\n        const newVolume = event.target.value;\n        const rightVolume = newVolume * 100;\n        const leftVolume = 100 - rightVolume;\n        this.audio.volume = newVolume;\n        this.volumeSlider.style.background = `linear-gradient(to right, #708303, #e9ff70 ${rightVolume}%, #272727 ${leftVolume}%)`;\n    }\n    initializeFirstSong() {\n        const firstPlaylist = document.querySelector('.playlist');\n        if (!firstPlaylist) return;\n        const firstSong = firstPlaylist.querySelector('.song');\n        if (!firstSong) return;\n        this.currentPlaylist = firstPlaylist;\n        this.currentSong = firstSong;\n        // Fix: songElement was undefined, should use firstSong\n        const encodedUrl = firstSong.dataset.src;\n        try {\n            const decodedUrl = atob(encodedUrl);\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                console.error('Invalid decoded URL:', decodedUrl);\n                return;\n            }\n            this.audio.src = decodedUrl;\n            this.updatePlayerInfo(firstSong);\n        } catch (e) {\n            console.error('Error decoding URL:', e);\n        }\n    }\n    toggleRandom() {\n        this.isRandom = !this.isRandom;\n        // Adicionar ou remover a classe 'active' no botão random\n        if (this.isRandom) {\n            this.randomButton.classList.add('active');\n        } else {\n            this.randomButton.classList.remove('active');\n        }\n    }\n    getRandomSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        let randomSong;\n        do {\n            randomSong = songs[Math.floor(Math.random() * songs.length)];\n        } while (randomSong === this.currentSong && songs.length > 1);\n        return randomSong;\n    }\n    getNextSong() {\n        if (this.isRandom) {\n            return this.getRandomSong();\n        }\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex + 1] || (this.isLooping ? songs[0] : null);\n    }\n    getPreviousSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex - 1] || (this.isLooping ? songs[songs.length - 1] : null);\n    }\n    play(songElement, playlistElement) {\n        try {\n            const encodedUrl = songElement.dataset.src;\n            const decodedUrl = atob(encodedUrl);\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                console.error('Invalid decoded URL:', decodedUrl);\n                return;\n            }\n            if (this.currentSong && this.currentSong !== songElement) {\n                this.currentSong.querySelector('.play-button').classList.remove('active');\n                this.currentSong.classList.remove('active');\n            }\n            if (this.audio.src !== decodedUrl) {\n                this.audio.src = decodedUrl;\n            }\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong = songElement;\n            this.currentPlaylist = playlistElement;\n            this.updatePlayerInfo(songElement);\n            this.syncButtons(songElement);\n        } catch (e) {\n            console.error('Error playing song:', e);\n        }\n    }\n    pause(songElement = null) {\n        this.audio.pause();\n        this.isPlaying = false;\n        if (songElement) {\n            const playButton = songElement.querySelector('.play-button');\n            if (playButton) playButton.classList.remove('active');\n            songElement.classList.remove('active');\n        }\n        this.playPauseButton.classList.remove('active');\n    }\n    togglePlayPause() {\n        if (this.isPlaying) {\n            this.pause(this.currentSong);\n        } else {\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong.querySelector('.play-button').classList.add('active');\n            this.currentSong.classList.add('active');\n            this.playPauseButton.classList.add('active');\n        }\n    }\n    toggleLoop() {\n        this.isLooping = !this.isLooping;\n        if (this.isLooping) {\n            this.loopButton.classList.add('active');\n        } else {\n            this.loopButton.classList.remove('active');\n        }\n    }\n    next() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        }\n    }\n    previous() {\n        if (this.audio.currentTime > 2) {\n            this.audio.currentTime = 0;\n        } else {\n            const previousSong = this.getPreviousSong();\n            if (previousSong) {\n                this.play(previousSong, this.currentPlaylist);\n            }\n        }\n    }\n    handleSongEnd() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        } else {\n            this.isPlaying = false;\n            this.audio.currentTime = 0;\n            this.syncButtons(null);\n        }\n    }\n    updatePlayerInfo(songElement) {\n        this.titleElement.textContent = songElement.querySelector('.title').textContent;\n        this.artistElement.textContent = songElement.querySelector('.artist').textContent;\n        this.timeElement.textContent = songElement.querySelector('.time').textContent;\n        //const genders = [...songElement.querySelectorAll('.genders li')].map(li => li.textContent);\n        //this.gendersElement.textContent = genders.join(', ');\n        const thumbSrc = songElement.querySelector('.thumb').src;\n        this.thumbElement.src = thumbSrc;\n    }\n    syncButtons(songElement) {\n        document.querySelectorAll('.play-button').forEach(button => button.classList.remove('active'));\n        document.querySelectorAll('.song').forEach(song => song.classList.remove('active'));\n\n        if (songElement) {\n            songElement.querySelector('.play-button').classList.add('active');\n            songElement.classList.add('active');\n            this.playPauseButton.classList.add('active');\n        } else {\n            this.playPauseButton.classList.remove('active');\n        }\n    }\n    updateProgressBar() {\n        const progress = (this.audio.currentTime / this.audio.duration) * 100;\n        this.progressBar.style.width = `${progress}%`;\n    }\n    seek(event) {\n        const rect = this.progressBarContainer.getBoundingClientRect();\n        const offsetX = event.clientX - rect.left;\n        const percentage = offsetX / rect.width;\n        this.audio.currentTime = percentage * this.audio.duration;\n    }\n    startDrag(event) {\n        const dragHandler = (e) => this.seek(e);\n        const stopDrag = () => {\n            document.removeEventListener('mousemove', dragHandler);\n            document.removeEventListener('mouseup', stopDrag);\n        };\n        document.addEventListener('mousemove', dragHandler);\n        document.addEventListener('mouseup', stopDrag);\n\n        this.seek(event);\n    }\n}    \n// Inicializar o player apenas se o elemento existir\nif (document.querySelector('#player-main')) {\n    \n    window.globalPlayer = new Player(); // Define como global\n\n    // Configurar eventos para as músicas\n    document.addEventListener('click', (event) => {\n        const playButton = event.target.closest('.play-button');\n        if (!playButton) return;\n\n        const song = playButton.closest('.song');\n        const playlist = playButton.closest('.playlist');\n        \n        if (!song || !playlist) return;\n\n        if (globalPlayer.currentSong === song && globalPlayer.isPlaying) {\n            globalPlayer.pause(song);\n        } else {\n            globalPlayer.play(song, playlist);\n        }\n    });\n}","function handleDownload(event) {\n    fetch(`${wpApiSettings.root}soniica/v1/register-download`, {\n        method: 'POST',\n        headers: {\n            'X-WP-Nonce': wpApiSettings.nonce,\n            'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (!data.success) {\n            event.preventDefault();\n            alert(data.message);\n            return false;\n        } else {\n            // Atualiza o estado de todos os botões de download para usuários não premium\n            if (!data.is_premium) {\n                document.querySelectorAll('.download-link').forEach(downloadLink => {\n                    downloadLink.classList.add('download-blocked');\n                    downloadLink.setAttribute('title', 'You have reached the download limit on free plan today.');\n                    //downloadLink.textContent = 'Download indisponível';\n                    downloadLink.setAttribute('href', '/get-premium');\n                    downloadLink.removeAttribute('download');\n                });\n            }\n        }\n    })\n    .catch(error => {\n        console.error('Erro:', error);\n        event.preventDefault();\n        return false;\n    });\n\n    return true;\n}\n\nconst playerDownloadButtons = document.querySelectorAll('.download-link');\n\nfunction isBase64(str) {\n    try {\n        return btoa(atob(str)) === str;\n    } catch (e) {\n        return false;\n    }\n}\n\nconst PlayerManager = (function () {\n    let instance = null;\n\n    return {\n        getInstance: function () {\n            if (!instance) {\n                instance = new Player();\n            }\n            return instance;\n        }\n    };\n})();\n\nfunction stopGlobalPlayer() {\n    if (window.globalPlayer && window.globalPlayer.currentSong) {\n        window.globalPlayer.pause(window.globalPlayer.currentSong);\n    }\n}\n\n\n\nplayerDownloadButtons.forEach((button) => {\n    button.addEventListener('click', (event) => {\n        event.preventDefault();\n\n        let encodedDownloadLink = button.getAttribute(\"href\");\n        let decodedLink = '';\n\n        // Verifica se a string é Base64 válida antes de decodificar\n        if (isBase64(encodedDownloadLink)) {\n            // se for base64, decodifica\n            decodedLink = atob(encodedDownloadLink);\n        } else {\n            // se não for, usa o link normal\n            decodedLink = encodedDownloadLink;\n \n            window.location.href = decodedLink;\n            return;\n        }\n\n        if (!button.classList.contains('download-blocked')) {\n            window.open(decodedLink, '_blank');\n        } else {\n            console.log('deu ruim');\n        }\n    });\n});\n\nwindow.addEventListener('beforeunload', function(event) {\n    stopGlobalPlayer();\n});\n","\n    const userAvatar = document.querySelector(\".user-avatar\");\n    const userSubMenu = document.querySelector(\".user-sub-menu\");\n\n    if (userAvatar && userSubMenu) {\n        userAvatar.addEventListener(\"click\", function (event) {\n            userSubMenu.classList.toggle(\"active\");\n        });\n\n        document.addEventListener(\"click\", function (event) {\n            if (!userAvatar.contains(event.target) && !userSubMenu.contains(event.target)) {\n                userSubMenu.classList.remove(\"active\");\n            }\n        });\n    }\n"]}