{"version":3,"sources":["accordion/accordion.js","flash-message/flash-message.js","player/player.js","playlist-modal/playlist-modal.js","profile-img/profile-img.js","song/song.js","top-menu/top-menu.js"],"names":["AccordionMenu","constructor","this","accordionItems","document","querySelectorAll","init","forEach","item","querySelector","addEventListener","currentItem","isActive","classList","contains","remove","style","maxHeight","add","content","scrollHeight","let","fm_close","modal","display","Player","audio","Audio","currentSong","currentPlaylist","isPlaying","isLooping","isRandom","titleElement","artistElement","timeElement","gendersElement","thumbElement","playPauseButton","nextButton","previousButton","loopButton","randomButton","progressBarContainer","progressBar","volumeSlider","togglePlayPause","next","previous","toggleLoop","toggleRandom","updateProgressBar","handleSongEnd","adjustVolume","e","seek","startDrag","initializeFirstSong","volume","value","isPlayerDisabled","event","newVolume","target","rightVolume","leftVolume","background","firstPlaylist","firstSong","encodedUrl","dataset","src","decodedUrl","atob","startsWith","updatePlayerInfo","console","error","getRandomSong","otherSongs","playlistSongs","Array","from","length","filter","song","Math","floor","random","getNextSong","songs","currentIndex","findIndex","getPreviousSong","play","songElement","playlistElement","syncButtons","pause","playButton","nextSong","previousSong","currentTime","textContent","thumbSrc","button","progress","duration","width","rect","getBoundingClientRect","offsetX","clientX","left","dragHandler","stopDrag","removeEventListener","window","globalPlayer","closest","playlist","originalForm","currentTarget","modalBody","modalBackground","modalCloseButton","clonedForm","cloneNode","innerHTML","appendChild","closeModal","closeOnOutsideClick","setTimeout","profilePictureForm","removeProfilePicture","preventDefault","fileInput","formData","FormData","append","files","fetch","method","body","credentials","then","res","json","data","log","message","getElementById","handleDownload","wpApiSettings","root","headers","X-WP-Nonce","nonce","Content-Type","response","success","alert","is_premium","downloadLink","setAttribute","removeAttribute","catch","confirm","playerDownloadButtons","isBase64","str","btoa","PlayerManager","instance","getInstance","stopGlobalPlayer","encodedDownloadLink","getAttribute","decodedLink","open","location","href","userAvatar","userSubMenu","toggle"],"mappings":"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","file":"main.min.js","sourcesContent":["class AccordionMenu {\n    constructor() {\n        this.accordionItems = document.querySelectorAll('.accordion-item');\n        this.init();\n    }\n\n    init() {\n        this.accordionItems.forEach(item => {\n            const header = item.querySelector('.accordion-header');\n            \n            header.addEventListener('click', () => {\n                const currentItem = item;\n                const isActive = currentItem.classList.contains('active');\n                \n                // Fecha todos os itens\n                this.accordionItems.forEach(item => {\n                    item.classList.remove('active');\n                    const content = item.querySelector('.accordion-content');\n                    content.style.maxHeight = null;\n                });\n                \n                // Abre o item atual se não estava ativo\n                if (!isActive) {\n                    currentItem.classList.add('active');\n                    const content = currentItem.querySelector('.accordion-content');\n                    content.style.maxHeight = content.scrollHeight + \"px\";\n                }\n            });\n        });\n    }\n}\n\n// Inicializa o accordion quando o DOM estiver pronto\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (document.querySelector('.accordion-item')) {\n        new AccordionMenu();\n    }\n});","let fm_close = document.querySelector('.fm-close');\nlet modal = document.querySelector('.flash-message-overlay');\n\nif(fm_close ){\n    fm_close.addEventListener('click', function() {\n        modal.style.display = 'none';\n    });\n}\n","class Player {\n    constructor() {\n        this.audio = new Audio();\n        this.currentSong = null;\n        this.currentPlaylist = null;\n        this.isPlaying = false;\n        this.isLooping = false; // Estado do loop\n        this.isRandom = false; // Estado do random\n        // Elementos do player principal\n        this.titleElement = document.querySelector('.current-title');\n        this.artistElement = document.querySelector('.current-artist');\n        this.timeElement = document.querySelector('.current-time');\n        this.gendersElement = document.querySelector('.current-genders');\n        this.thumbElement = document.querySelector('.current-thumb');\n        this.playPauseButton = document.querySelector('.play-pause');\n        this.nextButton = document.querySelector('.next-song');\n        this.previousButton = document.querySelector('.previous-song');\n        this.loopButton = document.querySelector('.loop');\n        this.randomButton = document.querySelector('.random'); // Botão de random\n        this.progressBarContainer = document.querySelector('.progress-bar-container');\n        this.progressBar = document.querySelector('.progress-bar');\n        this.volumeSlider = document.querySelector('#volume-slider'); // Slider de volume\n        // Event listeners\n        this.playPauseButton.addEventListener('click', () => this.togglePlayPause());\n        this.nextButton.addEventListener('click', () => this.next());\n        this.previousButton.addEventListener('click', () => this.previous());\n        this.loopButton.addEventListener('click', () => this.toggleLoop());\n        this.randomButton.addEventListener('click', () => this.toggleRandom());\n        this.audio.addEventListener('timeupdate', () => this.updateProgressBar());\n        this.audio.addEventListener('ended', () => this.handleSongEnd());\n        this.volumeSlider.addEventListener('input', (e) => this.adjustVolume(e));\n        // Eventos para a barra de progresso\n        this.progressBarContainer.addEventListener('click', (e) => this.seek(e));\n        this.progressBarContainer.addEventListener('mousedown', (e) => this.startDrag(e));\n        // Inicializar a primeira música automaticamente\n        this.initializeFirstSong();\n        this.audio.volume = this.volumeSlider.value;\n    }\n    isPlayerDisabled() {\n        return document.querySelector('#player-main')?.classList.contains('disabled');\n    }\n    adjustVolume(event) {\n        // Ajustar o volume do elemento de áudio com base no slider\n        const newVolume = event.target.value;\n        const rightVolume = newVolume * 100;\n        const leftVolume = 100 - rightVolume;\n        this.audio.volume = newVolume;\n        this.volumeSlider.style.background = `linear-gradient(to right, #e95265, #207dff ${rightVolume}%, #272727 ${leftVolume}%)`;\n    }\n    initializeFirstSong() {\n        const firstPlaylist = document.querySelector('.playlist');\n        if (!firstPlaylist) return;\n        const firstSong = firstPlaylist.querySelector('.song');\n        if (!firstSong) return;\n        this.currentPlaylist = firstPlaylist;\n        this.currentSong = firstSong;\n        // Fix: songElement was undefined, should use firstSong\n        const encodedUrl = firstSong.dataset.src;\n        try {\n            const decodedUrl = atob(encodedUrl);\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                console.error('Invalid decoded URL:', decodedUrl);\n                return;\n            }\n            this.audio.src = decodedUrl;\n            this.updatePlayerInfo(firstSong);\n        } catch (e) {\n            console.error('Error decoding URL:', e);\n        }\n    }\n    toggleRandom() {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        this.isRandom = !this.isRandom;\n        // Adicionar ou remover a classe 'active' no botão random\n        if (this.isRandom) {\n            this.randomButton.classList.add('active');\n        } else {\n            this.randomButton.classList.remove('active');\n        }\n    }\ngetRandomSong() {\n    if (!this.currentPlaylist) return null;\n\n    const playlistSongs = Array.from(this.currentPlaylist.querySelectorAll('.song'));\n\n    if (playlistSongs.length <= 1) return playlistSongs[0] || null;\n\n    const otherSongs = playlistSongs.filter(song => song !== this.currentSong);\n    const randomIndex = Math.floor(Math.random() * otherSongs.length);\n\n    return otherSongs[randomIndex];\n}\n    getNextSong() {\n        if (this.isRandom) {\n            return this.getRandomSong();\n        }\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex + 1] || (this.isLooping ? songs[0] : null);\n    }\n    getPreviousSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex - 1] || (this.isLooping ? songs[songs.length - 1] : null);\n    }\n    play(songElement, playlistElement) {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        try {\n            const encodedUrl = songElement.dataset.src;\n            const decodedUrl = atob(encodedUrl);\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                console.error('Invalid decoded URL:', decodedUrl);\n                return;\n            }\n            if (this.currentSong && this.currentSong !== songElement) {\n                this.currentSong.querySelector('.play-button').classList.remove('active');\n                this.currentSong.classList.remove('active');\n            }\n            if (this.audio.src !== decodedUrl) {\n                this.audio.src = decodedUrl;\n            }\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong = songElement;\n            this.currentPlaylist = playlistElement;\n            this.updatePlayerInfo(songElement);\n            this.syncButtons(songElement);\n\n        } catch (e) {\n            console.error('Error playing song:', e);\n        }\n    }\n    pause(songElement = null) {\n        this.audio.pause();\n        this.isPlaying = false;\n        if (songElement) {\n            const playButton = songElement.querySelector('.play-button');\n            if (playButton) playButton.classList.remove('active');\n            songElement.classList.remove('active');\n        }\n        this.playPauseButton.classList.remove('active');\n    }\n    togglePlayPause() {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        if (this.isPlaying) {\n            this.pause(this.currentSong);\n        } else {\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong.querySelector('.play-button').classList.add('active');\n            this.currentSong.classList.add('active');\n            this.playPauseButton.classList.add('active');\n        }\n    }\n    toggleLoop() {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        this.isLooping = !this.isLooping;\n        if (this.isLooping) {\n            this.loopButton.classList.add('active');\n        } else {\n            this.loopButton.classList.remove('active');\n        }\n    }\n    next() {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        }\n    }\n    previous() {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        if (this.audio.currentTime > 2) {\n            this.audio.currentTime = 0;\n        } else {\n            const previousSong = this.getPreviousSong();\n            if (previousSong) {\n                this.play(previousSong, this.currentPlaylist);\n            }\n        }\n    }\n    handleSongEnd() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        } else {\n            this.isPlaying = false;\n            this.audio.currentTime = 0;\n            this.syncButtons(null);\n        }\n    }\n    updatePlayerInfo(songElement) {\n        this.titleElement.textContent = songElement.querySelector('.title').textContent;\n        this.artistElement.textContent = songElement.querySelector('.artist').textContent;\n        this.timeElement.textContent = songElement.querySelector('.time').textContent;\n        //const genders = [...songElement.querySelectorAll('.genders li')].map(li => li.textContent);\n        //this.gendersElement.textContent = genders.join(', ');\n        const thumbSrc = songElement.querySelector('.thumb').src;\n        this.thumbElement.src = thumbSrc;\n    }\n    syncButtons(songElement) {\n        document.querySelectorAll('.play-button').forEach(button => button.classList.remove('active'));\n        document.querySelectorAll('.song').forEach(song => song.classList.remove('active'));\n\n        if (songElement) {\n            songElement.querySelector('.play-button').classList.add('active');\n            songElement.classList.add('active');\n            this.playPauseButton.classList.add('active');\n        } else {\n            this.playPauseButton.classList.remove('active');\n        }\n    }\n    updateProgressBar() {\n        const progress = (this.audio.currentTime / this.audio.duration) * 100;\n        this.progressBar.style.width = `${progress}%`;\n    }\n    seek(event) {\n        const rect = this.progressBarContainer.getBoundingClientRect();\n        const offsetX = event.clientX - rect.left;\n        const percentage = offsetX / rect.width;\n        this.audio.currentTime = percentage * this.audio.duration;\n    }\n    startDrag(event) {\n        const dragHandler = (e) => this.seek(e);\n        const stopDrag = () => {\n            document.removeEventListener('mousemove', dragHandler);\n            document.removeEventListener('mouseup', stopDrag);\n        };\n        document.addEventListener('mousemove', dragHandler);\n        document.addEventListener('mouseup', stopDrag);\n\n        this.seek(event);\n    }\n}    \n// Inicializar o player apenas se o elemento existir\nif (document.querySelector('#player-main')) {\n    \n    window.globalPlayer = new Player(); // Define como global\n\n    // Configurar eventos para as músicas\n    document.addEventListener('click', (event) => {\n        const playButton = event.target.closest('.play-button');\n        if (!playButton) return;\n\n        const song = playButton.closest('.song');\n        const playlist = playButton.closest('.playlist');\n        \n        if (!song || !playlist) return;\n\n        if (globalPlayer.currentSong === song && globalPlayer.isPlaying) {\n            globalPlayer.pause(song);\n        } else {\n            globalPlayer.play(song, playlist);\n        }\n    });\n}\n","document.querySelectorAll('.add-to-playlist-button').forEach(button => {\n  button.addEventListener('click', event => {\n    const songElement = event.currentTarget.closest('.song');\n    const originalForm = songElement.querySelector('.playlist-form');\n\n    const modal = document.querySelector('.playlist-modal');\n    const modalBody = document.querySelector('.playlist-modal-body');\n    const modalBackground = document.querySelector('.playlist-modal-background');\n    const modalCloseButton = document.querySelector('.playlist-modal-close');\n\n    if (originalForm && modalBody && modalBackground) {\n      const clonedForm = originalForm.cloneNode(true); // clona o formulário inteiro\n\n      modalBody.innerHTML = ''; // limpa conteúdo anterior\n      modalBody.appendChild(clonedForm); // insere o clone\n      modalBackground.classList.add('active');\n\n      // Função de fechar modal\n      const closeModal = () => {\n        modalBackground.classList.remove('active');\n        document.removeEventListener('click', closeOnOutsideClick);\n        if (modalCloseButton) {\n          modalCloseButton.removeEventListener('click', closeModal);\n        }\n      };\n\n      // Fechar ao clicar fora do modal\n      const closeOnOutsideClick = (e) => {\n        if (!modal.contains(e.target)) {\n          closeModal();\n        }\n      };\n\n      // Espera para evitar conflito com o clique atual\n      setTimeout(() => {\n        document.addEventListener('click', closeOnOutsideClick);\n      }, 10);\n\n      // Fechar ao clicar no botão \"X\"\n      if (modalCloseButton) {\n        modalCloseButton.addEventListener('click', closeModal);\n      }\n    }\n  });\n});\n","let profilePictureForm = document.querySelector(\"#profile-picture-form\");\nif(profilePictureForm) {\n    profilePictureForm.addEventListener(\"submit\", function (e) {\n        e.preventDefault();\n        const fileInput = document.querySelector('input[name=\"profile_picture\"]');\n        const formData = new FormData();\n        formData.append(\"action\", \"upload_profile_picture\");\n        formData.append(\"profile_picture\", fileInput.files[0]);\n        fetch(\"/wp-admin/admin-ajax.php\", {\n          method: \"POST\",\n          body: formData,\n          credentials: \"same-origin\",\n        })\n          .then(res => res.json())\n          .then(data => {\n            console.log(data.data?.message)\n            document.getElementById(\"upload-status\").textContent = data.data?.message;\n          });\n      });\n}\n\nlet removeProfilePicture = document.getElementById(\"remove-profile-picture\");\nif(removeProfilePicture) {\n  removeProfilePicture.addEventListener(\"click\", function () {\n    if (!confirm(\"Tem certeza que quer remover a imagem de perfil?\")) return;\n  \n    const formData = new FormData();\n    formData.append(\"action\", \"remove_profile_picture\");\n  \n    fetch(\"/wp-admin/admin-ajax.php\", {\n      method: \"POST\",\n      body: formData,\n      credentials: \"same-origin\",\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        document.getElementById(\"upload-status\").textContent = data.data?.message || \"Erro ao remover imagem.\";\n        document.getElementById(\"profile-picture-preview\").src = \"\"; // ou uma imagem padrão\n      });\n  });\n}\n\n\n\n\n  ","function handleDownload(event) {\n    fetch(`${wpApiSettings.root}soniica/v1/register-download`, {\n        method: 'POST',\n        headers: {\n            'X-WP-Nonce': wpApiSettings.nonce,\n            'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (!data.success) {\n            event.preventDefault();\n            alert(data.message);\n            return false;\n        } else {\n            // Atualiza o estado de todos os botões de download para usuários não premium\n            if (!data.is_premium) {\n                document.querySelectorAll('.download-link').forEach(downloadLink => {\n                    downloadLink.classList.add('download-blocked');\n                    downloadLink.setAttribute('title', 'You have reached the download limit on free plan today.');\n                    //downloadLink.textContent = 'Download indisponível';\n                    downloadLink.setAttribute('href', '/get-premium');\n                    downloadLink.removeAttribute('download');\n                });\n            }\n        }\n    })\n    .catch(error => {\n        console.error('Erro:', error);\n        event.preventDefault();\n        return false;\n    });\n\n    return true;\n}\n\nconst playerDownloadButtons = document.querySelectorAll('.download-link');\n\nfunction isBase64(str) {\n    try {\n        return btoa(atob(str)) === str;\n    } catch (e) {\n        return false;\n    }\n}\n\nconst PlayerManager = (function () {\n    let instance = null;\n\n    return {\n        getInstance: function () {\n            if (!instance) {\n                instance = new Player();\n            }\n            return instance;\n        }\n    };\n})();\n\nfunction stopGlobalPlayer() {\n    if (window.globalPlayer && window.globalPlayer.currentSong) {\n        window.globalPlayer.pause(window.globalPlayer.currentSong);\n    }\n}\n\n\n\nplayerDownloadButtons.forEach((button) => {\n    button.addEventListener('click', (event) => {\n        event.preventDefault();\n\n        let encodedDownloadLink = button.getAttribute(\"href\");\n        let decodedLink = '';\n\n        // Verifica se a string é Base64 válida antes de decodificar\n        if (isBase64(encodedDownloadLink)) {\n            // se for base64, decodifica\n            decodedLink = atob(encodedDownloadLink);\n        } else {\n            // se não for, usa o link normal\n            decodedLink = encodedDownloadLink;\n \n            window.location.href = decodedLink;\n            return;\n        }\n\n        if (!button.classList.contains('download-blocked')) {\n            window.open(decodedLink, '_blank');\n        } else {\n            console.log('deu ruim');\n        }\n    });\n});\n\nwindow.addEventListener('beforeunload', function(event) {\n    stopGlobalPlayer();\n});\n","\n    const userAvatar = document.querySelector(\".user-avatar\");\n    const userSubMenu = document.querySelector(\".user-sub-menu\");\n\n    if (userAvatar && userSubMenu) {\n        userAvatar.addEventListener(\"click\", function (event) {\n            userSubMenu.classList.toggle(\"active\");\n        });\n\n        document.addEventListener(\"click\", function (event) {\n            if (!userAvatar.contains(event.target) && !userSubMenu.contains(event.target)) {\n                userSubMenu.classList.remove(\"active\");\n            }\n        });\n    }\n"]}