{"version":3,"sources":["accordion/accordion.js","flash-message/flash-message.js","player/player.js","playlist-modal/playlist-modal.js","profile-img/profile-img.js","song/song.js","top-menu/top-menu.js"],"names":["AccordionMenu","constructor","this","accordionItems","document","querySelectorAll","init","forEach","item","querySelector","addEventListener","currentItem","isActive","classList","contains","remove","style","maxHeight","add","content","scrollHeight","let","fm_close","modal","display","Player","audio","Audio","currentSong","currentPlaylist","isPlaying","isLooping","isRandom","readyState","initialize","titleElement","artistElement","timeElement","gendersElement","thumbElement","playPauseButton","nextButton","previousButton","loopButton","randomButton","progressBarContainer","progressBar","volumeSlider","setupEventListeners","setupAudioEventListeners","setTimeout","initializeFirstSong","togglePlayPause","next","previous","toggleLoop","toggleRandom","adjustVolume","e","volume","value","seek","startDrag","updateProgressBar","handleSongEnd","console","error","code","message","src","log","isPlayerDisabled","event","newVolume","target","rightVolume","leftVolume","background","firstSong","firstPlaylist","await","loadAudioSrc","updatePlayerInfo","warn","songElement","encodedUrl","dataset","Error","decodedUrl","atob","startsWith","finalUrl","window","location","protocol","replace","testAudioUrl","url","Promise","resolve","reject","testAudio","timeout","clearTimeout","getRandomSong","otherSongs","playlistSongs","Array","from","length","filter","song","Math","floor","random","getNextSong","songs","currentIndex","findIndex","getPreviousSong","play","playlistElement","pause","syncButtons","handlePlayError","playButton","nextSong","previousSong","currentTime","titleEl","artistEl","timeEl","thumbEl","textContent","button","progress","duration","width","rect","getBoundingClientRect","offsetX","clientX","left","dragHandler","stopDrag","removeEventListener","initializePlayer","globalPlayer","closest","playlist","originalForm","currentTarget","modalBody","modalBackground","modalCloseButton","clonedForm","cloneNode","innerHTML","appendChild","closeModal","closeOnOutsideClick","profilePictureForm","removeProfilePicture","preventDefault","fileInput","formData","FormData","append","files","fetch","method","body","credentials","then","res","json","data","getElementById","handleDownload","wpApiSettings","root","headers","X-WP-Nonce","nonce","Content-Type","response","success","alert","is_premium","downloadLink","setAttribute","removeAttribute","catch","confirm","playerDownloadButtons","isBase64","str","btoa","PlayerManager","instance","getInstance","stopGlobalPlayer","encodedDownloadLink","getAttribute","decodedLink","open","href","userAvatar","userSubMenu","toggle"],"mappings":"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","file":"main.min.js","sourcesContent":["class AccordionMenu {\n    constructor() {\n        this.accordionItems = document.querySelectorAll('.accordion-item');\n        this.init();\n    }\n\n    init() {\n        this.accordionItems.forEach(item => {\n            const header = item.querySelector('.accordion-header');\n            \n            header.addEventListener('click', () => {\n                const currentItem = item;\n                const isActive = currentItem.classList.contains('active');\n                \n                // Fecha todos os itens\n                this.accordionItems.forEach(item => {\n                    item.classList.remove('active');\n                    const content = item.querySelector('.accordion-content');\n                    content.style.maxHeight = null;\n                });\n                \n                // Abre o item atual se não estava ativo\n                if (!isActive) {\n                    currentItem.classList.add('active');\n                    const content = currentItem.querySelector('.accordion-content');\n                    content.style.maxHeight = content.scrollHeight + \"px\";\n                }\n            });\n        });\n    }\n}\n\n// Inicializa o accordion quando o DOM estiver pronto\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (document.querySelector('.accordion-item')) {\n        new AccordionMenu();\n    }\n});","let fm_close = document.querySelector('.fm-close');\nlet modal = document.querySelector('.flash-message-overlay');\n\nif(fm_close ){\n    fm_close.addEventListener('click', function() {\n        modal.style.display = 'none';\n    });\n}\n","class Player {\n    constructor() {\n        this.audio = new Audio();\n        this.currentSong = null;\n        this.currentPlaylist = null;\n        this.isPlaying = false;\n        this.isLooping = false;\n        this.isRandom = false;\n\n        // Aguardar DOM estar pronto\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.initialize());\n        } else {\n            this.initialize();\n        }\n    }\n\n    initialize() {\n        // Elementos do player principal\n        this.titleElement = document.querySelector('.current-title');\n        this.artistElement = document.querySelector('.current-artist');\n        this.timeElement = document.querySelector('.current-time');\n        this.gendersElement = document.querySelector('.current-genders');\n        this.thumbElement = document.querySelector('.current-thumb');\n        this.playPauseButton = document.querySelector('.play-pause');\n        this.nextButton = document.querySelector('.next-song');\n        this.previousButton = document.querySelector('.previous-song');\n        this.loopButton = document.querySelector('.loop');\n        this.randomButton = document.querySelector('.random');\n        this.progressBarContainer = document.querySelector('.progress-bar-container');\n        this.progressBar = document.querySelector('.progress-bar');\n        this.volumeSlider = document.querySelector('#volume-slider');\n\n        this.setupEventListeners();\n        this.setupAudioEventListeners();\n        \n        // Delay na inicialização da primeira música\n        setTimeout(() => this.initializeFirstSong(), 100);\n    }\n\n    setupEventListeners() {\n        // Event listeners (somente se os elementos existem)\n        if (this.playPauseButton)\n            this.playPauseButton.addEventListener('click', () => this.togglePlayPause());\n\n        if (this.nextButton)\n            this.nextButton.addEventListener('click', () => this.next());\n\n        if (this.previousButton)\n            this.previousButton.addEventListener('click', () => this.previous());\n\n        if (this.loopButton)\n            this.loopButton.addEventListener('click', () => this.toggleLoop());\n\n        if (this.randomButton)\n            this.randomButton.addEventListener('click', () => this.toggleRandom());\n\n        if (this.volumeSlider) {\n            this.volumeSlider.addEventListener('input', (e) => this.adjustVolume(e));\n            this.audio.volume = this.volumeSlider.value;\n        }\n\n        if (this.progressBarContainer) {\n            this.progressBarContainer.addEventListener('click', (e) => this.seek(e));\n            this.progressBarContainer.addEventListener('mousedown', (e) => this.startDrag(e));\n        }\n    }\n\n    setupAudioEventListeners() {\n        this.audio.addEventListener('timeupdate', () => this.updateProgressBar());\n        this.audio.addEventListener('ended', () => this.handleSongEnd());\n        \n        // Adicionar tratamento de erros\n        this.audio.addEventListener('error', (e) => {\n            console.error('Audio error:', e);\n            console.error('Audio error code:', this.audio.error?.code);\n            console.error('Audio error message:', this.audio.error?.message);\n            console.error('Audio src:', this.audio.src);\n        });\n\n        this.audio.addEventListener('loadstart', () => {\n            console.log('Loading started for:', this.audio.src);\n        });\n\n        this.audio.addEventListener('canplaythrough', () => {\n            console.log('Can play through:', this.audio.src);\n        });\n    }\n\n    isPlayerDisabled() {\n        return document.querySelector('#player-main')?.classList.contains('disabled');\n    }\n\n    adjustVolume(event) {\n        const newVolume = event.target.value;\n        const rightVolume = newVolume * 100;\n        const leftVolume = 100 - rightVolume;\n        this.audio.volume = newVolume;\n        this.volumeSlider.style.background = `linear-gradient(to right, #e95265, #207dff ${rightVolume}%, #272727 ${leftVolume}%)`;\n    }\n\n    // Método melhorado com mais validações\n    async initializeFirstSong() {\n        try {\n            const firstPlaylist = document.querySelector('.playlist');\n            if (!firstPlaylist) {\n                console.warn('No playlist found');\n                return;\n            }\n            \n            const firstSong = firstPlaylist.querySelector('.song');\n            if (!firstSong) {\n                console.warn('No songs found in playlist');\n                return;\n            }\n\n            this.currentPlaylist = firstPlaylist;\n            this.currentSong = firstSong;\n            \n            await this.loadAudioSrc(firstSong);\n            this.updatePlayerInfo(firstSong);\n        } catch (error) {\n            console.error('Error initializing first song:', error);\n        }\n    }\n\n    // Método separado para carregar áudio com melhor tratamento de erro\n    async loadAudioSrc(songElement) {\n        const encodedUrl = songElement?.dataset?.src;\n        \n        if (!encodedUrl) {\n            throw new Error('No encoded URL found in song element');\n        }\n\n        try {\n            const decodedUrl = atob(encodedUrl);\n            \n            // Validações mais rigorosas\n            if (!decodedUrl || typeof decodedUrl !== 'string') {\n                throw new Error('Invalid decoded URL');\n            }\n\n            // Verificar protocolo\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                throw new Error(`Invalid protocol in URL: ${decodedUrl}`);\n            }\n\n            // Se estamos em HTTPS, forçar URLs para HTTPS também\n            let finalUrl = decodedUrl;\n            if (window.location.protocol === 'https:' && decodedUrl.startsWith('http://')) {\n                finalUrl = decodedUrl.replace('http://', 'https://');\n                console.warn('Converting HTTP URL to HTTPS for security:', finalUrl);\n            }\n\n            console.log('Loading audio from:', finalUrl);\n            \n            // Teste de conectividade antes de definir como src\n            await this.testAudioUrl(finalUrl);\n            \n            this.audio.src = finalUrl;\n            \n        } catch (e) {\n            console.error('Error decoding/loading URL:', e);\n            console.error('Original encoded URL:', encodedUrl);\n            throw e;\n        }\n    }\n\n    // Método para testar se a URL é válida antes de usar\n    async testAudioUrl(url) {\n        return new Promise((resolve, reject) => {\n            const testAudio = new Audio();\n            \n            const timeout = setTimeout(() => {\n                testAudio.src = '';\n                reject(new Error('Audio URL test timeout'));\n            }, 5000);\n\n            testAudio.addEventListener('canplay', () => {\n                clearTimeout(timeout);\n                testAudio.src = '';\n                resolve();\n            });\n\n            testAudio.addEventListener('error', (e) => {\n                clearTimeout(timeout);\n                testAudio.src = '';\n                reject(new Error(`Audio URL test failed: ${e.message}`));\n            });\n\n            testAudio.src = url;\n        });\n    }\n\n    toggleRandom() {\n        if(this.isPlayerDisabled()) return;\n        \n        this.isRandom = !this.isRandom;\n        \n        if (this.randomButton) {\n            if (this.isRandom) {\n                this.randomButton.classList.add('active');\n            } else {\n                this.randomButton.classList.remove('active');\n            }\n        }\n    }\n\n    getRandomSong() {\n        if (!this.currentPlaylist) return null;\n\n        const playlistSongs = Array.from(this.currentPlaylist.querySelectorAll('.song'));\n\n        if (playlistSongs.length <= 1) return playlistSongs[0] || null;\n\n        const otherSongs = playlistSongs.filter(song => song !== this.currentSong);\n        const randomIndex = Math.floor(Math.random() * otherSongs.length);\n\n        return otherSongs[randomIndex];\n    }\n\n    getNextSong() {\n        if (this.isRandom) {\n            return this.getRandomSong();\n        }\n        if (!this.currentPlaylist) return null;\n        \n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex + 1] || (this.isLooping ? songs[0] : null);\n    }\n\n    getPreviousSong() {\n        if (!this.currentPlaylist) return null;\n        \n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex - 1] || (this.isLooping ? songs[songs.length - 1] : null);\n    }\n\n    async play(songElement, playlistElement) {\n        if(this.isPlayerDisabled()) return;\n        \n        try {\n            // Pausar música atual se houver\n            if (this.currentSong && this.currentSong !== songElement) {\n                this.pause(this.currentSong);\n            }\n\n            await this.loadAudioSrc(songElement);\n            \n            await this.audio.play();\n            \n            this.isPlaying = true;\n            this.currentSong = songElement;\n            this.currentPlaylist = playlistElement;\n            \n            this.updatePlayerInfo(songElement);\n            this.syncButtons(songElement);\n\n        } catch (e) {\n            console.error('Error playing song:', e);\n            // Tentar fallback ou mostrar mensagem de erro para o usuário\n            this.handlePlayError(e);\n        }\n    }\n\n    handlePlayError(error) {\n        console.error('Play error details:', error);\n        // Aqui você pode implementar uma UI de feedback para o usuário\n        // Por exemplo, mostrar uma mensagem ou tentar uma URL alternativa\n    }\n\n    pause(songElement = null) {\n        this.audio.pause();\n        this.isPlaying = false;\n        \n        if (songElement) {\n            const playButton = songElement.querySelector('.play-button');\n            if (playButton) playButton.classList.remove('active');\n            songElement.classList.remove('active');\n        }\n        \n        if (this.playPauseButton) {\n            this.playPauseButton.classList.remove('active');\n        }\n    }\n\n    async togglePlayPause() {\n        if(this.isPlayerDisabled()) return;\n        \n        try {\n            if (this.isPlaying) {\n                this.pause(this.currentSong);\n            } else {\n                await this.audio.play();\n                this.isPlaying = true;\n                \n                if (this.currentSong) {\n                    const playButton = this.currentSong.querySelector('.play-button');\n                    if (playButton) playButton.classList.add('active');\n                    this.currentSong.classList.add('active');\n                }\n                \n                if (this.playPauseButton) {\n                    this.playPauseButton.classList.add('active');\n                }\n            }\n        } catch (error) {\n            console.error('Error in togglePlayPause:', error);\n            this.handlePlayError(error);\n        }\n    }\n\n    toggleLoop() {\n        if(this.isPlayerDisabled()) return;\n        \n        this.isLooping = !this.isLooping;\n        \n        if (this.loopButton) {\n            if (this.isLooping) {\n                this.loopButton.classList.add('active');\n            } else {\n                this.loopButton.classList.remove('active');\n            }\n        }\n    }\n\n    next() {\n        if(this.isPlayerDisabled()) return;\n        \n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        }\n    }\n\n    previous() {\n        if(this.isPlayerDisabled()) return;\n        \n        if (this.audio.currentTime > 2) {\n            this.audio.currentTime = 0;\n        } else {\n            const previousSong = this.getPreviousSong();\n            if (previousSong) {\n                this.play(previousSong, this.currentPlaylist);\n            }\n        }\n    }\n\n    handleSongEnd() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        } else {\n            this.isPlaying = false;\n            this.audio.currentTime = 0;\n            this.syncButtons(null);\n        }\n    }\n\n    updatePlayerInfo(songElement) {\n        if (!songElement) return;\n        \n        const titleEl = songElement.querySelector('.title');\n        const artistEl = songElement.querySelector('.artist');\n        const timeEl = songElement.querySelector('.time');\n        const thumbEl = songElement.querySelector('.thumb');\n\n        if (this.titleElement && titleEl) {\n            this.titleElement.textContent = titleEl.textContent;\n        }\n        \n        if (this.artistElement && artistEl) {\n            this.artistElement.textContent = artistEl.textContent;\n        }\n        \n        if (this.timeElement && timeEl) {\n            this.timeElement.textContent = timeEl.textContent;\n        }\n        \n        if (this.thumbElement && thumbEl) {\n            this.thumbElement.src = thumbEl.src;\n        }\n    }\n\n    syncButtons(songElement) {\n        // Remover active de todos os botões\n        document.querySelectorAll('.play-button').forEach(button => button.classList.remove('active'));\n        document.querySelectorAll('.song').forEach(song => song.classList.remove('active'));\n\n        if (songElement) {\n            const playButton = songElement.querySelector('.play-button');\n            if (playButton) playButton.classList.add('active');\n            songElement.classList.add('active');\n            \n            if (this.playPauseButton) {\n                this.playPauseButton.classList.add('active');\n            }\n        } else {\n            if (this.playPauseButton) {\n                this.playPauseButton.classList.remove('active');\n            }\n        }\n    }\n\n    updateProgressBar() {\n        if (!this.progressBar || !this.audio.duration) return;\n        \n        const progress = (this.audio.currentTime / this.audio.duration) * 100;\n        this.progressBar.style.width = `${progress}%`;\n    }\n\n    seek(event) {\n        if (!this.progressBarContainer || !this.audio.duration) return;\n        \n        const rect = this.progressBarContainer.getBoundingClientRect();\n        const offsetX = event.clientX - rect.left;\n        const percentage = offsetX / rect.width;\n        this.audio.currentTime = percentage * this.audio.duration;\n    }\n\n    startDrag(event) {\n        const dragHandler = (e) => this.seek(e);\n        const stopDrag = () => {\n            document.removeEventListener('mousemove', dragHandler);\n            document.removeEventListener('mouseup', stopDrag);\n        };\n        \n        document.addEventListener('mousemove', dragHandler);\n        document.addEventListener('mouseup', stopDrag);\n\n        this.seek(event);\n    }\n}\n\n// Inicialização melhorada\nfunction initializePlayer() {\n    if (document.querySelector('#player-main')) {\n        window.globalPlayer = new Player();\n\n        // Configurar eventos para as músicas\n        document.addEventListener('click', (event) => {\n            const playButton = event.target.closest('.play-button');\n            if (!playButton) return;\n\n            const song = playButton.closest('.song');\n            const playlist = playButton.closest('.playlist');\n            \n            if (!song || !playlist) return;\n\n            if (window.globalPlayer.currentSong === song && window.globalPlayer.isPlaying) {\n                window.globalPlayer.pause(song);\n            } else {\n                window.globalPlayer.play(song, playlist);\n            }\n        });\n    }\n}\n\n// Garantir que o DOM esteja pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initializePlayer);\n} else {\n    initializePlayer();\n}","document.querySelectorAll('.add-to-playlist-button').forEach(button => {\n  button.addEventListener('click', event => {\n    const songElement = event.currentTarget.closest('.song');\n    const originalForm = songElement.querySelector('.playlist-form');\n\n    const modal = document.querySelector('.playlist-modal');\n    const modalBody = document.querySelector('.playlist-modal-body');\n    const modalBackground = document.querySelector('.playlist-modal-background');\n    const modalCloseButton = document.querySelector('.playlist-modal-close');\n\n    if (originalForm && modalBody && modalBackground) {\n      const clonedForm = originalForm.cloneNode(true); // clona o formulário inteiro\n\n      modalBody.innerHTML = ''; // limpa conteúdo anterior\n      modalBody.appendChild(clonedForm); // insere o clone\n      modalBackground.classList.add('active');\n\n      // Função de fechar modal\n      const closeModal = () => {\n        modalBackground.classList.remove('active');\n        document.removeEventListener('click', closeOnOutsideClick);\n        if (modalCloseButton) {\n          modalCloseButton.removeEventListener('click', closeModal);\n        }\n      };\n\n      // Fechar ao clicar fora do modal\n      const closeOnOutsideClick = (e) => {\n        if (!modal.contains(e.target)) {\n          closeModal();\n        }\n      };\n\n      // Espera para evitar conflito com o clique atual\n      setTimeout(() => {\n        document.addEventListener('click', closeOnOutsideClick);\n      }, 10);\n\n      // Fechar ao clicar no botão \"X\"\n      if (modalCloseButton) {\n        modalCloseButton.addEventListener('click', closeModal);\n      }\n    }\n  });\n});\n","let profilePictureForm = document.querySelector(\"#profile-picture-form\");\nif(profilePictureForm) {\n    profilePictureForm.addEventListener(\"submit\", function (e) {\n        e.preventDefault();\n        const fileInput = document.querySelector('input[name=\"profile_picture\"]');\n        const formData = new FormData();\n        formData.append(\"action\", \"upload_profile_picture\");\n        formData.append(\"profile_picture\", fileInput.files[0]);\n        fetch(\"/wp-admin/admin-ajax.php\", {\n          method: \"POST\",\n          body: formData,\n          credentials: \"same-origin\",\n        })\n          .then(res => res.json())\n          .then(data => {\n            console.log(data.data?.message)\n            document.getElementById(\"upload-status\").textContent = data.data?.message;\n          });\n      });\n}\n\nlet removeProfilePicture = document.getElementById(\"remove-profile-picture\");\nif(removeProfilePicture) {\n  removeProfilePicture.addEventListener(\"click\", function () {\n    if (!confirm(\"Tem certeza que quer remover a imagem de perfil?\")) return;\n  \n    const formData = new FormData();\n    formData.append(\"action\", \"remove_profile_picture\");\n  \n    fetch(\"/wp-admin/admin-ajax.php\", {\n      method: \"POST\",\n      body: formData,\n      credentials: \"same-origin\",\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        document.getElementById(\"upload-status\").textContent = data.data?.message || \"Erro ao remover imagem.\";\n        document.getElementById(\"profile-picture-preview\").src = \"\"; // ou uma imagem padrão\n      });\n  });\n}\n\n\n\n\n  ","function handleDownload(event) {\n    fetch(`${wpApiSettings.root}soniica/v1/register-download`, {\n        method: 'POST',\n        headers: {\n            'X-WP-Nonce': wpApiSettings.nonce,\n            'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (!data.success) {\n            event.preventDefault();\n            alert(data.message);\n            return false;\n        } else {\n            // Atualiza o estado de todos os botões de download para usuários não premium\n            if (!data.is_premium) {\n                document.querySelectorAll('.download-link').forEach(downloadLink => {\n                    downloadLink.classList.add('download-blocked');\n                    downloadLink.setAttribute('title', 'You have reached the download limit on free plan today.');\n                    //downloadLink.textContent = 'Download indisponível';\n                    downloadLink.setAttribute('href', '/get-premium');\n                    downloadLink.removeAttribute('download');\n                });\n            }\n        }\n    })\n    .catch(error => {\n        console.error('Erro:', error);\n        event.preventDefault();\n        return false;\n    });\n\n    return true;\n}\n\nconst playerDownloadButtons = document.querySelectorAll('.download-link');\n\nfunction isBase64(str) {\n    try {\n        return btoa(atob(str)) === str;\n    } catch (e) {\n        return false;\n    }\n}\n\nconst PlayerManager = (function () {\n    let instance = null;\n\n    return {\n        getInstance: function () {\n            if (!instance) {\n                instance = new Player();\n            }\n            return instance;\n        }\n    };\n})();\n\nfunction stopGlobalPlayer() {\n    if (window.globalPlayer && window.globalPlayer.currentSong) {\n        window.globalPlayer.pause(window.globalPlayer.currentSong);\n    }\n}\n\n\n\nplayerDownloadButtons.forEach((button) => {\n    button.addEventListener('click', (event) => {\n        event.preventDefault();\n\n        let encodedDownloadLink = button.getAttribute(\"href\");\n        let decodedLink = '';\n\n        // Verifica se a string é Base64 válida antes de decodificar\n        if (isBase64(encodedDownloadLink)) {\n            // se for base64, decodifica\n            decodedLink = atob(encodedDownloadLink);\n        } else {\n            // se não for, usa o link normal\n            decodedLink = encodedDownloadLink;\n \n            window.location.href = decodedLink;\n            return;\n        }\n\n        if (!button.classList.contains('download-blocked')) {\n            window.open(decodedLink, '_blank');\n        } else {\n            console.log('deu ruim');\n        }\n    });\n});\n\nwindow.addEventListener('beforeunload', function(event) {\n    stopGlobalPlayer();\n});\n","\n    const userAvatar = document.querySelector(\".user-avatar\");\n    const userSubMenu = document.querySelector(\".user-sub-menu\");\n\n    if (userAvatar && userSubMenu) {\n        userAvatar.addEventListener(\"click\", function (event) {\n            userSubMenu.classList.toggle(\"active\");\n        });\n\n        document.addEventListener(\"click\", function (event) {\n            if (!userAvatar.contains(event.target) && !userSubMenu.contains(event.target)) {\n                userSubMenu.classList.remove(\"active\");\n            }\n        });\n    }\n"]}