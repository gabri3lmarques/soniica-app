{"version":3,"sources":["accordion/accordion.js","flash-message/flash-message.js","player/player.js","playlist-modal/playlist-modal.js","profile-img/profile-img.js","song/song.js","top-menu/top-menu.js"],"names":["AccordionMenu","constructor","this","accordionItems","document","querySelectorAll","init","forEach","item","querySelector","addEventListener","currentItem","isActive","classList","contains","remove","style","maxHeight","add","content","scrollHeight","let","fm_close","modal","display","Player","audio","Audio","currentSong","currentPlaylist","isPlaying","isLooping","isRandom","titleElement","artistElement","timeElement","gendersElement","thumbElement","playPauseButton","nextButton","previousButton","loopButton","randomButton","progressBarContainer","progressBar","volumeSlider","togglePlayPause","next","previous","toggleLoop","toggleRandom","updateProgressBar","handleSongEnd","adjustVolume","e","seek","startDrag","initializeFirstSong","volume","value","isPlayerDisabled","event","newVolume","target","rightVolume","leftVolume","background","firstPlaylist","firstSong","encodedUrl","dataset","src","decodedUrl","atob","startsWith","updatePlayerInfo","console","error","getRandomSong","randomSong","songs","Math","floor","random","length","getNextSong","currentIndex","findIndex","song","getPreviousSong","play","songElement","playlistElement","syncButtons","pause","playButton","nextSong","previousSong","currentTime","textContent","thumbSrc","button","progress","duration","width","rect","getBoundingClientRect","offsetX","clientX","left","dragHandler","stopDrag","removeEventListener","window","globalPlayer","closest","playlist","originalForm","currentTarget","modalBody","modalBackground","modalCloseButton","clonedForm","cloneNode","innerHTML","appendChild","closeModal","closeOnOutsideClick","setTimeout","profilePictureForm","removeProfilePicture","preventDefault","fileInput","formData","FormData","append","files","fetch","method","body","credentials","then","res","json","data","log","message","getElementById","handleDownload","wpApiSettings","root","headers","X-WP-Nonce","nonce","Content-Type","response","success","alert","is_premium","downloadLink","setAttribute","removeAttribute","catch","confirm","playerDownloadButtons","isBase64","str","btoa","PlayerManager","instance","getInstance","stopGlobalPlayer","encodedDownloadLink","getAttribute","decodedLink","open","location","href","userAvatar","userSubMenu","toggle"],"mappings":"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","file":"main.min.js","sourcesContent":["class AccordionMenu {\r\n    constructor() {\r\n        this.accordionItems = document.querySelectorAll('.accordion-item');\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.accordionItems.forEach(item => {\r\n            const header = item.querySelector('.accordion-header');\r\n            \r\n            header.addEventListener('click', () => {\r\n                const currentItem = item;\r\n                const isActive = currentItem.classList.contains('active');\r\n                \r\n                // Fecha todos os itens\r\n                this.accordionItems.forEach(item => {\r\n                    item.classList.remove('active');\r\n                    const content = item.querySelector('.accordion-content');\r\n                    content.style.maxHeight = null;\r\n                });\r\n                \r\n                // Abre o item atual se não estava ativo\r\n                if (!isActive) {\r\n                    currentItem.classList.add('active');\r\n                    const content = currentItem.querySelector('.accordion-content');\r\n                    content.style.maxHeight = content.scrollHeight + \"px\";\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n// Inicializa o accordion quando o DOM estiver pronto\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    if (document.querySelector('.accordion-item')) {\r\n        new AccordionMenu();\r\n    }\r\n});","let fm_close = document.querySelector('.fm-close');\r\nlet modal = document.querySelector('.flash-message-overlay');\r\n\r\nif(fm_close ){\r\n    fm_close.addEventListener('click', function() {\r\n        modal.style.display = 'none';\r\n    });\r\n}\r\n","class Player {\r\n    constructor() {\r\n        this.audio = new Audio();\r\n        this.currentSong = null;\r\n        this.currentPlaylist = null;\r\n        this.isPlaying = false;\r\n        this.isLooping = false; // Estado do loop\r\n        this.isRandom = false; // Estado do random\r\n        // Elementos do player principal\r\n        this.titleElement = document.querySelector('.current-title');\r\n        this.artistElement = document.querySelector('.current-artist');\r\n        this.timeElement = document.querySelector('.current-time');\r\n        this.gendersElement = document.querySelector('.current-genders');\r\n        this.thumbElement = document.querySelector('.current-thumb');\r\n        this.playPauseButton = document.querySelector('.play-pause');\r\n        this.nextButton = document.querySelector('.next');\r\n        this.previousButton = document.querySelector('.previous');\r\n        this.loopButton = document.querySelector('.loop');\r\n        this.randomButton = document.querySelector('.random'); // Botão de random\r\n        this.progressBarContainer = document.querySelector('.progress-bar-container');\r\n        this.progressBar = document.querySelector('.progress-bar');\r\n        this.volumeSlider = document.querySelector('#volume-slider'); // Slider de volume\r\n        // Event listeners\r\n        this.playPauseButton.addEventListener('click', () => this.togglePlayPause());\r\n        this.nextButton.addEventListener('click', () => this.next());\r\n        this.previousButton.addEventListener('click', () => this.previous());\r\n        this.loopButton.addEventListener('click', () => this.toggleLoop());\r\n        this.randomButton.addEventListener('click', () => this.toggleRandom());\r\n        this.audio.addEventListener('timeupdate', () => this.updateProgressBar());\r\n        this.audio.addEventListener('ended', () => this.handleSongEnd());\r\n        this.volumeSlider.addEventListener('input', (e) => this.adjustVolume(e));\r\n        // Eventos para a barra de progresso\r\n        this.progressBarContainer.addEventListener('click', (e) => this.seek(e));\r\n        this.progressBarContainer.addEventListener('mousedown', (e) => this.startDrag(e));\r\n        // Inicializar a primeira música automaticamente\r\n        this.initializeFirstSong();\r\n        this.audio.volume = this.volumeSlider.value;\r\n    }\r\n    isPlayerDisabled() {\r\n        return document.querySelector('#player-main')?.classList.contains('disabled');\r\n    }\r\n    adjustVolume(event) {\r\n        // Ajustar o volume do elemento de áudio com base no slider\r\n        const newVolume = event.target.value;\r\n        const rightVolume = newVolume * 100;\r\n        const leftVolume = 100 - rightVolume;\r\n        this.audio.volume = newVolume;\r\n        this.volumeSlider.style.background = `linear-gradient(to right, #708303, #e9ff70 ${rightVolume}%, #272727 ${leftVolume}%)`;\r\n    }\r\n    initializeFirstSong() {\r\n        const firstPlaylist = document.querySelector('.playlist');\r\n        if (!firstPlaylist) return;\r\n        const firstSong = firstPlaylist.querySelector('.song');\r\n        if (!firstSong) return;\r\n        this.currentPlaylist = firstPlaylist;\r\n        this.currentSong = firstSong;\r\n        // Fix: songElement was undefined, should use firstSong\r\n        const encodedUrl = firstSong.dataset.src;\r\n        try {\r\n            const decodedUrl = atob(encodedUrl);\r\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\r\n                console.error('Invalid decoded URL:', decodedUrl);\r\n                return;\r\n            }\r\n            this.audio.src = decodedUrl;\r\n            this.updatePlayerInfo(firstSong);\r\n        } catch (e) {\r\n            console.error('Error decoding URL:', e);\r\n        }\r\n    }\r\n    toggleRandom() {\r\n        if(this.isPlayerDisabled()){\r\n            return\r\n        }\r\n        this.isRandom = !this.isRandom;\r\n        // Adicionar ou remover a classe 'active' no botão random\r\n        if (this.isRandom) {\r\n            this.randomButton.classList.add('active');\r\n        } else {\r\n            this.randomButton.classList.remove('active');\r\n        }\r\n    }\r\n    getRandomSong() {\r\n                if(this.isPlayerDisabled()){\r\n            return\r\n        }\r\n        let randomSong;\r\n        do {\r\n            randomSong = songs[Math.floor(Math.random() * songs.length)];\r\n        } while (randomSong === this.currentSong && songs.length > 1);\r\n        return randomSong;\r\n    }\r\n    getNextSong() {\r\n        if (this.isRandom) {\r\n            return this.getRandomSong();\r\n        }\r\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\r\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\r\n        return songs[currentIndex + 1] || (this.isLooping ? songs[0] : null);\r\n    }\r\n    getPreviousSong() {\r\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\r\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\r\n        return songs[currentIndex - 1] || (this.isLooping ? songs[songs.length - 1] : null);\r\n    }\r\n    play(songElement, playlistElement) {\r\n        if(this.isPlayerDisabled()){\r\n            return\r\n        }\r\n        try {\r\n            const encodedUrl = songElement.dataset.src;\r\n            const decodedUrl = atob(encodedUrl);\r\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\r\n                console.error('Invalid decoded URL:', decodedUrl);\r\n                return;\r\n            }\r\n            if (this.currentSong && this.currentSong !== songElement) {\r\n                this.currentSong.querySelector('.play-button').classList.remove('active');\r\n                this.currentSong.classList.remove('active');\r\n            }\r\n            if (this.audio.src !== decodedUrl) {\r\n                this.audio.src = decodedUrl;\r\n            }\r\n            this.audio.play();\r\n            this.isPlaying = true;\r\n            this.currentSong = songElement;\r\n            this.currentPlaylist = playlistElement;\r\n            this.updatePlayerInfo(songElement);\r\n            this.syncButtons(songElement);\r\n\r\n        } catch (e) {\r\n            console.error('Error playing song:', e);\r\n        }\r\n    }\r\n    pause(songElement = null) {\r\n        this.audio.pause();\r\n        this.isPlaying = false;\r\n        if (songElement) {\r\n            const playButton = songElement.querySelector('.play-button');\r\n            if (playButton) playButton.classList.remove('active');\r\n            songElement.classList.remove('active');\r\n        }\r\n        this.playPauseButton.classList.remove('active');\r\n    }\r\n    togglePlayPause() {\r\n                if(this.isPlayerDisabled()){\r\n            return\r\n        }\r\n        if (this.isPlaying) {\r\n            this.pause(this.currentSong);\r\n        } else {\r\n            this.audio.play();\r\n            this.isPlaying = true;\r\n            this.currentSong.querySelector('.play-button').classList.add('active');\r\n            this.currentSong.classList.add('active');\r\n            this.playPauseButton.classList.add('active');\r\n        }\r\n    }\r\n    toggleLoop() {\r\n        if(this.isPlayerDisabled()){\r\n            return\r\n        }\r\n        this.isLooping = !this.isLooping;\r\n        if (this.isLooping) {\r\n            this.loopButton.classList.add('active');\r\n        } else {\r\n            this.loopButton.classList.remove('active');\r\n        }\r\n    }\r\n    next() {\r\n        const nextSong = this.getNextSong();\r\n        if (nextSong) {\r\n            this.play(nextSong, this.currentPlaylist);\r\n        }\r\n    }\r\n    previous() {\r\n        if (this.audio.currentTime > 2) {\r\n            this.audio.currentTime = 0;\r\n        } else {\r\n            const previousSong = this.getPreviousSong();\r\n            if (previousSong) {\r\n                this.play(previousSong, this.currentPlaylist);\r\n            }\r\n        }\r\n    }\r\n    handleSongEnd() {\r\n        const nextSong = this.getNextSong();\r\n        if (nextSong) {\r\n            this.play(nextSong, this.currentPlaylist);\r\n        } else {\r\n            this.isPlaying = false;\r\n            this.audio.currentTime = 0;\r\n            this.syncButtons(null);\r\n        }\r\n    }\r\n    updatePlayerInfo(songElement) {\r\n        this.titleElement.textContent = songElement.querySelector('.title').textContent;\r\n        this.artistElement.textContent = songElement.querySelector('.artist').textContent;\r\n        this.timeElement.textContent = songElement.querySelector('.time').textContent;\r\n        //const genders = [...songElement.querySelectorAll('.genders li')].map(li => li.textContent);\r\n        //this.gendersElement.textContent = genders.join(', ');\r\n        const thumbSrc = songElement.querySelector('.thumb').src;\r\n        this.thumbElement.src = thumbSrc;\r\n    }\r\n    syncButtons(songElement) {\r\n        document.querySelectorAll('.play-button').forEach(button => button.classList.remove('active'));\r\n        document.querySelectorAll('.song').forEach(song => song.classList.remove('active'));\r\n\r\n        if (songElement) {\r\n            songElement.querySelector('.play-button').classList.add('active');\r\n            songElement.classList.add('active');\r\n            this.playPauseButton.classList.add('active');\r\n        } else {\r\n            this.playPauseButton.classList.remove('active');\r\n        }\r\n    }\r\n    updateProgressBar() {\r\n        const progress = (this.audio.currentTime / this.audio.duration) * 100;\r\n        this.progressBar.style.width = `${progress}%`;\r\n    }\r\n    seek(event) {\r\n        const rect = this.progressBarContainer.getBoundingClientRect();\r\n        const offsetX = event.clientX - rect.left;\r\n        const percentage = offsetX / rect.width;\r\n        this.audio.currentTime = percentage * this.audio.duration;\r\n    }\r\n    startDrag(event) {\r\n        const dragHandler = (e) => this.seek(e);\r\n        const stopDrag = () => {\r\n            document.removeEventListener('mousemove', dragHandler);\r\n            document.removeEventListener('mouseup', stopDrag);\r\n        };\r\n        document.addEventListener('mousemove', dragHandler);\r\n        document.addEventListener('mouseup', stopDrag);\r\n\r\n        this.seek(event);\r\n    }\r\n}    \r\n// Inicializar o player apenas se o elemento existir\r\nif (document.querySelector('#player-main')) {\r\n    \r\n    window.globalPlayer = new Player(); // Define como global\r\n\r\n    // Configurar eventos para as músicas\r\n    document.addEventListener('click', (event) => {\r\n        const playButton = event.target.closest('.play-button');\r\n        if (!playButton) return;\r\n\r\n        const song = playButton.closest('.song');\r\n        const playlist = playButton.closest('.playlist');\r\n        \r\n        if (!song || !playlist) return;\r\n\r\n        if (globalPlayer.currentSong === song && globalPlayer.isPlaying) {\r\n            globalPlayer.pause(song);\r\n        } else {\r\n            globalPlayer.play(song, playlist);\r\n        }\r\n    });\r\n}\r\n","document.querySelectorAll('.add-to-playlist-button').forEach(button => {\r\n  button.addEventListener('click', event => {\r\n    const songElement = event.currentTarget.closest('.song');\r\n    const originalForm = songElement.querySelector('.playlist-form');\r\n\r\n    const modal = document.querySelector('.playlist-modal');\r\n    const modalBody = document.querySelector('.playlist-modal-body');\r\n    const modalBackground = document.querySelector('.playlist-modal-background');\r\n    const modalCloseButton = document.querySelector('.playlist-modal-close');\r\n\r\n    if (originalForm && modalBody && modalBackground) {\r\n      const clonedForm = originalForm.cloneNode(true); // clona o formulário inteiro\r\n\r\n      modalBody.innerHTML = ''; // limpa conteúdo anterior\r\n      modalBody.appendChild(clonedForm); // insere o clone\r\n      modalBackground.classList.add('active');\r\n\r\n      // Função de fechar modal\r\n      const closeModal = () => {\r\n        modalBackground.classList.remove('active');\r\n        document.removeEventListener('click', closeOnOutsideClick);\r\n        if (modalCloseButton) {\r\n          modalCloseButton.removeEventListener('click', closeModal);\r\n        }\r\n      };\r\n\r\n      // Fechar ao clicar fora do modal\r\n      const closeOnOutsideClick = (e) => {\r\n        if (!modal.contains(e.target)) {\r\n          closeModal();\r\n        }\r\n      };\r\n\r\n      // Espera para evitar conflito com o clique atual\r\n      setTimeout(() => {\r\n        document.addEventListener('click', closeOnOutsideClick);\r\n      }, 10);\r\n\r\n      // Fechar ao clicar no botão \"X\"\r\n      if (modalCloseButton) {\r\n        modalCloseButton.addEventListener('click', closeModal);\r\n      }\r\n    }\r\n  });\r\n});\r\n","let profilePictureForm = document.querySelector(\"#profile-picture-form\");\r\nif(profilePictureForm) {\r\n    profilePictureForm.addEventListener(\"submit\", function (e) {\r\n        e.preventDefault();\r\n        const fileInput = document.querySelector('input[name=\"profile_picture\"]');\r\n        const formData = new FormData();\r\n        formData.append(\"action\", \"upload_profile_picture\");\r\n        formData.append(\"profile_picture\", fileInput.files[0]);\r\n        fetch(\"/wp-admin/admin-ajax.php\", {\r\n          method: \"POST\",\r\n          body: formData,\r\n          credentials: \"same-origin\",\r\n        })\r\n          .then(res => res.json())\r\n          .then(data => {\r\n            console.log(data.data?.message)\r\n            document.getElementById(\"upload-status\").textContent = data.data?.message;\r\n          });\r\n      });\r\n}\r\n\r\nlet removeProfilePicture = document.getElementById(\"remove-profile-picture\");\r\nif(removeProfilePicture) {\r\n  removeProfilePicture.addEventListener(\"click\", function () {\r\n    if (!confirm(\"Are you sure you want to remove your profile picture?\")) return;\r\n  \r\n    const formData = new FormData();\r\n    formData.append(\"action\", \"remove_profile_picture\");\r\n  \r\n    fetch(\"/wp-admin/admin-ajax.php\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n      credentials: \"same-origin\",\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        console.log(data);\r\n        document.getElementById(\"upload-status\").textContent = data.data?.message || \"Erro ao remover imagem.\";\r\n        document.getElementById(\"profile-picture-preview\").src = \"\"; // ou uma imagem padrão\r\n      });\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n  ","function handleDownload(event) {\r\n    fetch(`${wpApiSettings.root}soniica/v1/register-download`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'X-WP-Nonce': wpApiSettings.nonce,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'same-origin'\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        if (!data.success) {\r\n            event.preventDefault();\r\n            alert(data.message);\r\n            return false;\r\n        } else {\r\n            // Atualiza o estado de todos os botões de download para usuários não premium\r\n            if (!data.is_premium) {\r\n                document.querySelectorAll('.download-link').forEach(downloadLink => {\r\n                    downloadLink.classList.add('download-blocked');\r\n                    downloadLink.setAttribute('title', 'You have reached the download limit on free plan today.');\r\n                    //downloadLink.textContent = 'Download indisponível';\r\n                    downloadLink.setAttribute('href', '/get-premium');\r\n                    downloadLink.removeAttribute('download');\r\n                });\r\n            }\r\n        }\r\n    })\r\n    .catch(error => {\r\n        console.error('Erro:', error);\r\n        event.preventDefault();\r\n        return false;\r\n    });\r\n\r\n    return true;\r\n}\r\n\r\nconst playerDownloadButtons = document.querySelectorAll('.download-link');\r\n\r\nfunction isBase64(str) {\r\n    try {\r\n        return btoa(atob(str)) === str;\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n}\r\n\r\nconst PlayerManager = (function () {\r\n    let instance = null;\r\n\r\n    return {\r\n        getInstance: function () {\r\n            if (!instance) {\r\n                instance = new Player();\r\n            }\r\n            return instance;\r\n        }\r\n    };\r\n})();\r\n\r\nfunction stopGlobalPlayer() {\r\n    if (window.globalPlayer && window.globalPlayer.currentSong) {\r\n        window.globalPlayer.pause(window.globalPlayer.currentSong);\r\n    }\r\n}\r\n\r\n\r\n\r\nplayerDownloadButtons.forEach((button) => {\r\n    button.addEventListener('click', (event) => {\r\n        event.preventDefault();\r\n\r\n        let encodedDownloadLink = button.getAttribute(\"href\");\r\n        let decodedLink = '';\r\n\r\n        // Verifica se a string é Base64 válida antes de decodificar\r\n        if (isBase64(encodedDownloadLink)) {\r\n            // se for base64, decodifica\r\n            decodedLink = atob(encodedDownloadLink);\r\n        } else {\r\n            // se não for, usa o link normal\r\n            decodedLink = encodedDownloadLink;\r\n \r\n            window.location.href = decodedLink;\r\n            return;\r\n        }\r\n\r\n        if (!button.classList.contains('download-blocked')) {\r\n            window.open(decodedLink, '_blank');\r\n        } else {\r\n            console.log('deu ruim');\r\n        }\r\n    });\r\n});\r\n\r\nwindow.addEventListener('beforeunload', function(event) {\r\n    stopGlobalPlayer();\r\n});\r\n","\r\n    const userAvatar = document.querySelector(\".user-avatar\");\r\n    const userSubMenu = document.querySelector(\".user-sub-menu\");\r\n\r\n    if (userAvatar && userSubMenu) {\r\n        userAvatar.addEventListener(\"click\", function (event) {\r\n            userSubMenu.classList.toggle(\"active\");\r\n        });\r\n\r\n        document.addEventListener(\"click\", function (event) {\r\n            if (!userAvatar.contains(event.target) && !userSubMenu.contains(event.target)) {\r\n                userSubMenu.classList.remove(\"active\");\r\n            }\r\n        });\r\n    }\r\n"]}