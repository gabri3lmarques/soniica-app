{"version":3,"sources":["accordion/accordion.js","flash-message/flash-message.js","playlist-modal/playlist-modal.js","player/player.js","profile-img/profile-img.js","song/song.js","top-menu/top-menu.js"],"names":["AccordionMenu","constructor","this","accordionItems","document","querySelectorAll","init","forEach","item","querySelector","addEventListener","currentItem","isActive","classList","contains","remove","style","maxHeight","add","content","scrollHeight","let","fm_close","modal","display","button","event","originalForm","currentTarget","closest","modalBody","modalBackground","modalCloseButton","clonedForm","cloneNode","innerHTML","appendChild","closeModal","removeEventListener","closeOnOutsideClick","e","target","setTimeout","Player","audio","Audio","currentSong","currentPlaylist","isPlaying","isLooping","isRandom","titleElement","artistElement","timeElement","gendersElement","thumbElement","playPauseButton","nextButton","previousButton","loopButton","randomButton","progressBarContainer","progressBar","volumeSlider","togglePlayPause","next","previous","toggleLoop","toggleRandom","updateProgressBar","handleSongEnd","adjustVolume","seek","startDrag","initializeFirstSong","volume","value","isPlayerDisabled","newVolume","rightVolume","leftVolume","background","firstPlaylist","firstSong","encodedUrl","dataset","src","decodedUrl","atob","startsWith","updatePlayerInfo","console","error","getRandomSong","randomSong","songs","Math","floor","random","length","getNextSong","currentIndex","findIndex","song","getPreviousSong","play","songElement","playlistElement","syncButtons","pause","playButton","nextSong","previousSong","currentTime","textContent","thumbSrc","progress","duration","width","rect","getBoundingClientRect","offsetX","clientX","left","dragHandler","stopDrag","window","globalPlayer","playlist","profilePictureForm","removeProfilePicture","preventDefault","fileInput","formData","FormData","append","files","fetch","method","body","credentials","then","res","json","data","log","message","getElementById","handleDownload","wpApiSettings","root","headers","X-WP-Nonce","nonce","Content-Type","response","success","alert","is_premium","downloadLink","setAttribute","removeAttribute","catch","confirm","playerDownloadButtons","isBase64","str","btoa","PlayerManager","instance","getInstance","stopGlobalPlayer","encodedDownloadLink","getAttribute","decodedLink","open","location","href","userAvatar","userSubMenu","toggle"],"mappings":"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","file":"main.min.js","sourcesContent":["class AccordionMenu {\n    constructor() {\n        this.accordionItems = document.querySelectorAll('.accordion-item');\n        this.init();\n    }\n\n    init() {\n        this.accordionItems.forEach(item => {\n            const header = item.querySelector('.accordion-header');\n            \n            header.addEventListener('click', () => {\n                const currentItem = item;\n                const isActive = currentItem.classList.contains('active');\n                \n                // Fecha todos os itens\n                this.accordionItems.forEach(item => {\n                    item.classList.remove('active');\n                    const content = item.querySelector('.accordion-content');\n                    content.style.maxHeight = null;\n                });\n                \n                // Abre o item atual se não estava ativo\n                if (!isActive) {\n                    currentItem.classList.add('active');\n                    const content = currentItem.querySelector('.accordion-content');\n                    content.style.maxHeight = content.scrollHeight + \"px\";\n                }\n            });\n        });\n    }\n}\n\n// Inicializa o accordion quando o DOM estiver pronto\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (document.querySelector('.accordion-item')) {\n        new AccordionMenu();\n    }\n});","let fm_close = document.querySelector('.fm-close');\nlet modal = document.querySelector('.flash-message-overlay');\n\nif(fm_close ){\n    fm_close.addEventListener('click', function() {\n        modal.style.display = 'none';\n    });\n}\n","document.querySelectorAll('.add-to-playlist-button').forEach(button => {\n  button.addEventListener('click', event => {\n    const songElement = event.currentTarget.closest('.song');\n    const originalForm = songElement.querySelector('.playlist-form');\n\n    const modal = document.querySelector('.playlist-modal');\n    const modalBody = document.querySelector('.playlist-modal-body');\n    const modalBackground = document.querySelector('.playlist-modal-background');\n    const modalCloseButton = document.querySelector('.playlist-modal-close');\n\n    if (originalForm && modalBody && modalBackground) {\n      const clonedForm = originalForm.cloneNode(true); // clona o formulário inteiro\n\n      modalBody.innerHTML = ''; // limpa conteúdo anterior\n      modalBody.appendChild(clonedForm); // insere o clone\n      modalBackground.classList.add('active');\n\n      // Função de fechar modal\n      const closeModal = () => {\n        modalBackground.classList.remove('active');\n        document.removeEventListener('click', closeOnOutsideClick);\n        if (modalCloseButton) {\n          modalCloseButton.removeEventListener('click', closeModal);\n        }\n      };\n\n      // Fechar ao clicar fora do modal\n      const closeOnOutsideClick = (e) => {\n        if (!modal.contains(e.target)) {\n          closeModal();\n        }\n      };\n\n      // Espera para evitar conflito com o clique atual\n      setTimeout(() => {\n        document.addEventListener('click', closeOnOutsideClick);\n      }, 10);\n\n      // Fechar ao clicar no botão \"X\"\n      if (modalCloseButton) {\n        modalCloseButton.addEventListener('click', closeModal);\n      }\n    }\n  });\n});\n","class Player {\n    constructor() {\n        this.audio = new Audio();\n        this.currentSong = null;\n        this.currentPlaylist = null;\n        this.isPlaying = false;\n        this.isLooping = false; // Estado do loop\n        this.isRandom = false; // Estado do random\n        // Elementos do player principal\n        this.titleElement = document.querySelector('.current-title');\n        this.artistElement = document.querySelector('.current-artist');\n        this.timeElement = document.querySelector('.current-time');\n        this.gendersElement = document.querySelector('.current-genders');\n        this.thumbElement = document.querySelector('.current-thumb');\n        this.playPauseButton = document.querySelector('.play-pause');\n        this.nextButton = document.querySelector('.next');\n        this.previousButton = document.querySelector('.previous');\n        this.loopButton = document.querySelector('.loop');\n        this.randomButton = document.querySelector('.random'); // Botão de random\n        this.progressBarContainer = document.querySelector('.progress-bar-container');\n        this.progressBar = document.querySelector('.progress-bar');\n        this.volumeSlider = document.querySelector('#volume-slider'); // Slider de volume\n        // Event listeners\n        this.playPauseButton.addEventListener('click', () => this.togglePlayPause());\n        this.nextButton.addEventListener('click', () => this.next());\n        this.previousButton.addEventListener('click', () => this.previous());\n        this.loopButton.addEventListener('click', () => this.toggleLoop());\n        this.randomButton.addEventListener('click', () => this.toggleRandom());\n        this.audio.addEventListener('timeupdate', () => this.updateProgressBar());\n        this.audio.addEventListener('ended', () => this.handleSongEnd());\n        this.volumeSlider.addEventListener('input', (e) => this.adjustVolume(e));\n        // Eventos para a barra de progresso\n        this.progressBarContainer.addEventListener('click', (e) => this.seek(e));\n        this.progressBarContainer.addEventListener('mousedown', (e) => this.startDrag(e));\n        // Inicializar a primeira música automaticamente\n        this.initializeFirstSong();\n        this.audio.volume = this.volumeSlider.value;\n    }\n    isPlayerDisabled() {\n        return document.querySelector('#player-main')?.classList.contains('disabled');\n    }\n    adjustVolume(event) {\n        // Ajustar o volume do elemento de áudio com base no slider\n        const newVolume = event.target.value;\n        const rightVolume = newVolume * 100;\n        const leftVolume = 100 - rightVolume;\n        this.audio.volume = newVolume;\n        this.volumeSlider.style.background = `linear-gradient(to right, #6a680b, #e9ff70 ${rightVolume}%, #272727 ${leftVolume}%)`;\n    }\n    initializeFirstSong() {\n        const firstPlaylist = document.querySelector('.playlist');\n        if (!firstPlaylist) return;\n        const firstSong = firstPlaylist.querySelector('.song');\n        if (!firstSong) return;\n        this.currentPlaylist = firstPlaylist;\n        this.currentSong = firstSong;\n        // Fix: songElement was undefined, should use firstSong\n        const encodedUrl = firstSong.dataset.src;\n        try {\n            const decodedUrl = atob(encodedUrl);\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                console.error('Invalid decoded URL:', decodedUrl);\n                return;\n            }\n            this.audio.src = decodedUrl;\n            this.updatePlayerInfo(firstSong);\n        } catch (e) {\n            console.error('Error decoding URL:', e);\n        }\n    }\n    toggleRandom() {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        this.isRandom = !this.isRandom;\n        // Adicionar ou remover a classe 'active' no botão random\n        if (this.isRandom) {\n            this.randomButton.classList.add('active');\n        } else {\n            this.randomButton.classList.remove('active');\n        }\n    }\n    getRandomSong() {\n                if(this.isPlayerDisabled()){\n            return\n        }\n        let randomSong;\n        do {\n            randomSong = songs[Math.floor(Math.random() * songs.length)];\n        } while (randomSong === this.currentSong && songs.length > 1);\n        return randomSong;\n    }\n    getNextSong() {\n        if (this.isRandom) {\n            return this.getRandomSong();\n        }\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex + 1] || (this.isLooping ? songs[0] : null);\n    }\n    getPreviousSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex - 1] || (this.isLooping ? songs[songs.length - 1] : null);\n    }\n    play(songElement, playlistElement) {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        try {\n            const encodedUrl = songElement.dataset.src;\n            const decodedUrl = atob(encodedUrl);\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                console.error('Invalid decoded URL:', decodedUrl);\n                return;\n            }\n            if (this.currentSong && this.currentSong !== songElement) {\n                this.currentSong.querySelector('.play-button').classList.remove('active');\n                this.currentSong.classList.remove('active');\n            }\n            if (this.audio.src !== decodedUrl) {\n                this.audio.src = decodedUrl;\n            }\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong = songElement;\n            this.currentPlaylist = playlistElement;\n            this.updatePlayerInfo(songElement);\n            this.syncButtons(songElement);\n\n        } catch (e) {\n            console.error('Error playing song:', e);\n        }\n    }\n    pause(songElement = null) {\n        this.audio.pause();\n        this.isPlaying = false;\n        if (songElement) {\n            const playButton = songElement.querySelector('.play-button');\n            if (playButton) playButton.classList.remove('active');\n            songElement.classList.remove('active');\n        }\n        this.playPauseButton.classList.remove('active');\n    }\n    togglePlayPause() {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        if (this.isPlaying) {\n            this.pause(this.currentSong);\n        } else {\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong.querySelector('.play-button').classList.add('active');\n            this.currentSong.classList.add('active');\n            this.playPauseButton.classList.add('active');\n        }\n    }\n    toggleLoop() {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        this.isLooping = !this.isLooping;\n        if (this.isLooping) {\n            this.loopButton.classList.add('active');\n        } else {\n            this.loopButton.classList.remove('active');\n        }\n    }\n    next() {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        }\n    }\n    previous() {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        if (this.audio.currentTime > 2) {\n            this.audio.currentTime = 0;\n        } else {\n            const previousSong = this.getPreviousSong();\n            if (previousSong) {\n                this.play(previousSong, this.currentPlaylist);\n            }\n        }\n    }\n    handleSongEnd() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        } else {\n            this.isPlaying = false;\n            this.audio.currentTime = 0;\n            this.syncButtons(null);\n        }\n    }\n    updatePlayerInfo(songElement) {\n        this.titleElement.textContent = songElement.querySelector('.title').textContent;\n        this.artistElement.textContent = songElement.querySelector('.artist').textContent;\n        this.timeElement.textContent = songElement.querySelector('.time').textContent;\n        //const genders = [...songElement.querySelectorAll('.genders li')].map(li => li.textContent);\n        //this.gendersElement.textContent = genders.join(', ');\n        const thumbSrc = songElement.querySelector('.thumb').src;\n        this.thumbElement.src = thumbSrc;\n    }\n    syncButtons(songElement) {\n        document.querySelectorAll('.play-button').forEach(button => button.classList.remove('active'));\n        document.querySelectorAll('.song').forEach(song => song.classList.remove('active'));\n\n        if (songElement) {\n            songElement.querySelector('.play-button').classList.add('active');\n            songElement.classList.add('active');\n            this.playPauseButton.classList.add('active');\n        } else {\n            this.playPauseButton.classList.remove('active');\n        }\n    }\n    updateProgressBar() {\n        const progress = (this.audio.currentTime / this.audio.duration) * 100;\n        this.progressBar.style.width = `${progress}%`;\n    }\n    seek(event) {\n        const rect = this.progressBarContainer.getBoundingClientRect();\n        const offsetX = event.clientX - rect.left;\n        const percentage = offsetX / rect.width;\n        this.audio.currentTime = percentage * this.audio.duration;\n    }\n    startDrag(event) {\n        const dragHandler = (e) => this.seek(e);\n        const stopDrag = () => {\n            document.removeEventListener('mousemove', dragHandler);\n            document.removeEventListener('mouseup', stopDrag);\n        };\n        document.addEventListener('mousemove', dragHandler);\n        document.addEventListener('mouseup', stopDrag);\n\n        this.seek(event);\n    }\n}    \n// Inicializar o player apenas se o elemento existir\nif (document.querySelector('#player-main')) {\n    \n    window.globalPlayer = new Player(); // Define como global\n\n    // Configurar eventos para as músicas\n    document.addEventListener('click', (event) => {\n        const playButton = event.target.closest('.play-button');\n        if (!playButton) return;\n\n        const song = playButton.closest('.song');\n        const playlist = playButton.closest('.playlist');\n        \n        if (!song || !playlist) return;\n\n        if (globalPlayer.currentSong === song && globalPlayer.isPlaying) {\n            globalPlayer.pause(song);\n        } else {\n            globalPlayer.play(song, playlist);\n        }\n    });\n}\n","let profilePictureForm = document.querySelector(\"#profile-picture-form\");\nif(profilePictureForm) {\n    profilePictureForm.addEventListener(\"submit\", function (e) {\n        e.preventDefault();\n        const fileInput = document.querySelector('input[name=\"profile_picture\"]');\n        const formData = new FormData();\n        formData.append(\"action\", \"upload_profile_picture\");\n        formData.append(\"profile_picture\", fileInput.files[0]);\n        fetch(\"/wp-admin/admin-ajax.php\", {\n          method: \"POST\",\n          body: formData,\n          credentials: \"same-origin\",\n        })\n          .then(res => res.json())\n          .then(data => {\n            console.log(data.data?.message)\n            document.getElementById(\"upload-status\").textContent = data.data?.message;\n          });\n      });\n}\n\nlet removeProfilePicture = document.getElementById(\"remove-profile-picture\");\nif(removeProfilePicture) {\n  removeProfilePicture.addEventListener(\"click\", function () {\n    if (!confirm(\"Are you sure you want to remove your profile picture?\")) return;\n  \n    const formData = new FormData();\n    formData.append(\"action\", \"remove_profile_picture\");\n  \n    fetch(\"/wp-admin/admin-ajax.php\", {\n      method: \"POST\",\n      body: formData,\n      credentials: \"same-origin\",\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        document.getElementById(\"upload-status\").textContent = data.data?.message || \"Erro ao remover imagem.\";\n        document.getElementById(\"profile-picture-preview\").src = \"\"; // ou uma imagem padrão\n      });\n  });\n}\n\n\n\n\n  ","function handleDownload(event) {\n    fetch(`${wpApiSettings.root}soniica/v1/register-download`, {\n        method: 'POST',\n        headers: {\n            'X-WP-Nonce': wpApiSettings.nonce,\n            'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (!data.success) {\n            event.preventDefault();\n            alert(data.message);\n            return false;\n        } else {\n            // Atualiza o estado de todos os botões de download para usuários não premium\n            if (!data.is_premium) {\n                document.querySelectorAll('.download-link').forEach(downloadLink => {\n                    downloadLink.classList.add('download-blocked');\n                    downloadLink.setAttribute('title', 'You have reached the download limit on free plan today.');\n                    //downloadLink.textContent = 'Download indisponível';\n                    downloadLink.setAttribute('href', '/get-premium');\n                    downloadLink.removeAttribute('download');\n                });\n            }\n        }\n    })\n    .catch(error => {\n        console.error('Erro:', error);\n        event.preventDefault();\n        return false;\n    });\n\n    return true;\n}\n\nconst playerDownloadButtons = document.querySelectorAll('.download-link');\n\nfunction isBase64(str) {\n    try {\n        return btoa(atob(str)) === str;\n    } catch (e) {\n        return false;\n    }\n}\n\nconst PlayerManager = (function () {\n    let instance = null;\n\n    return {\n        getInstance: function () {\n            if (!instance) {\n                instance = new Player();\n            }\n            return instance;\n        }\n    };\n})();\n\nfunction stopGlobalPlayer() {\n    if (window.globalPlayer && window.globalPlayer.currentSong) {\n        window.globalPlayer.pause(window.globalPlayer.currentSong);\n    }\n}\n\n\n\nplayerDownloadButtons.forEach((button) => {\n    button.addEventListener('click', (event) => {\n        event.preventDefault();\n\n        let encodedDownloadLink = button.getAttribute(\"href\");\n        let decodedLink = '';\n\n        // Verifica se a string é Base64 válida antes de decodificar\n        if (isBase64(encodedDownloadLink)) {\n            // se for base64, decodifica\n            decodedLink = atob(encodedDownloadLink);\n        } else {\n            // se não for, usa o link normal\n            decodedLink = encodedDownloadLink;\n \n            window.location.href = decodedLink;\n            return;\n        }\n\n        if (!button.classList.contains('download-blocked')) {\n            window.open(decodedLink, '_blank');\n        } else {\n            console.log('deu ruim');\n        }\n    });\n});\n\nwindow.addEventListener('beforeunload', function(event) {\n    stopGlobalPlayer();\n});\n","\n    const userAvatar = document.querySelector(\".user-avatar\");\n    const userSubMenu = document.querySelector(\".user-sub-menu\");\n\n    if (userAvatar && userSubMenu) {\n        userAvatar.addEventListener(\"click\", function (event) {\n            userSubMenu.classList.toggle(\"active\");\n        });\n\n        document.addEventListener(\"click\", function (event) {\n            if (!userAvatar.contains(event.target) && !userSubMenu.contains(event.target)) {\n                userSubMenu.classList.remove(\"active\");\n            }\n        });\n    }\n"]}