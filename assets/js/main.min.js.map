{"version":3,"sources":["accordion/accordion.js","player/player.js","song/song.js","top-menu/top-menu.js"],"names":["AccordionMenu","constructor","this","accordionItems","document","querySelectorAll","init","forEach","item","querySelector","addEventListener","currentItem","isActive","classList","contains","remove","style","maxHeight","add","content","scrollHeight","Player","audio","Audio","currentSong","currentPlaylist","isPlaying","isLooping","isRandom","titleElement","artistElement","timeElement","gendersElement","thumbElement","playPauseButton","nextButton","previousButton","loopButton","randomButton","progressBarContainer","progressBar","volumeSlider","downloadButton","togglePlayPause","next","previous","toggleLoop","toggleRandom","updateProgressBar","handleSongEnd","adjustVolume","e","seek","startDrag","initializeFirstSong","volume","value","event","newVolume","target","firstSong","firstPlaylist","src","dataset","updatePlayerInfo","updateDownloadButton","getRandomSong","songs","let","randomSong","Math","floor","random","length","getNextSong","currentIndex","findIndex","song","getPreviousSong","play","songElement","playlistElement","songSrc","syncButtons","pause","textContent","nextSong","previousSong","currentTime","genders","map","li","thumbSrc","join","button","progress","duration","width","rect","getBoundingClientRect","offsetX","clientX","left","dragHandler","stopDrag","removeEventListener","downloadLink","href","setAttribute","removeAttribute","player","playButton","closest","playlist","handleDownload","fetch","wpApiSettings","root","method","headers","X-WP-Nonce","nonce","Content-Type","credentials","then","response","json","data","success","preventDefault","alert","message","is_premium","cursor","catch","error","console","userAvatar","userSubMenu","toggle"],"mappings":"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","file":"main.min.js","sourcesContent":["class AccordionMenu {\n    constructor() {\n        this.accordionItems = document.querySelectorAll('.accordion-item');\n        this.init();\n    }\n\n    init() {\n        this.accordionItems.forEach(item => {\n            const header = item.querySelector('.accordion-header');\n            \n            header.addEventListener('click', () => {\n                const currentItem = item;\n                const isActive = currentItem.classList.contains('active');\n                \n                // Fecha todos os itens\n                this.accordionItems.forEach(item => {\n                    item.classList.remove('active');\n                    const content = item.querySelector('.accordion-content');\n                    content.style.maxHeight = null;\n                });\n                \n                // Abre o item atual se nÃ£o estava ativo\n                if (!isActive) {\n                    currentItem.classList.add('active');\n                    const content = currentItem.querySelector('.accordion-content');\n                    content.style.maxHeight = content.scrollHeight + \"px\";\n                }\n            });\n        });\n    }\n}\n\n// Inicializa o accordion quando o DOM estiver pronto\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (document.querySelector('.accordion-item')) {\n        new AccordionMenu();\n    }\n});","class Player {\n    constructor() {\n        this.audio = new Audio();\n        this.currentSong = null;\n        this.currentPlaylist = null;\n        this.isPlaying = false;\n        this.isLooping = false; // Estado do loop\n        this.isRandom = false; // Estado do random\n\n        // Elementos do player principal\n        this.titleElement = document.querySelector('.current-title');\n        this.artistElement = document.querySelector('.current-artist');\n        this.timeElement = document.querySelector('.current-time');\n        this.gendersElement = document.querySelector('.current-genders');\n        this.thumbElement = document.querySelector('.current-thumb');\n        this.playPauseButton = document.querySelector('.play-pause');\n        this.nextButton = document.querySelector('.next');\n        this.previousButton = document.querySelector('.previous');\n        this.loopButton = document.querySelector('.loop');\n        this.randomButton = document.querySelector('.random'); // BotÃ£o de random\n        this.progressBarContainer = document.querySelector('.progress-bar-container');\n        this.progressBar = document.querySelector('.progress-bar');\n        this.volumeSlider = document.querySelector('#volume-slider'); // Slider de volume\n        if(document.querySelector('.download-link')){this.downloadButton = document.querySelector('.download-button')}\n       \n\n        // Event listeners\n        this.playPauseButton.addEventListener('click', () => this.togglePlayPause());\n        this.nextButton.addEventListener('click', () => this.next());\n        this.previousButton.addEventListener('click', () => this.previous());\n        this.loopButton.addEventListener('click', () => this.toggleLoop());\n        this.randomButton.addEventListener('click', () => this.toggleRandom());\n        this.audio.addEventListener('timeupdate', () => this.updateProgressBar());\n        this.audio.addEventListener('ended', () => this.handleSongEnd());\n        this.volumeSlider.addEventListener('input', (e) => this.adjustVolume(e));\n\n        // Eventos para a barra de progresso\n        this.progressBarContainer.addEventListener('click', (e) => this.seek(e));\n        this.progressBarContainer.addEventListener('mousedown', (e) => this.startDrag(e));\n\n        // Inicializar a primeira mÃºsica automaticamente\n        this.initializeFirstSong();\n        \n        this.audio.volume = this.volumeSlider.value;\n    }\n    \n    adjustVolume(event) {\n        // Ajustar o volume do elemento de Ã¡udio com base no slider\n        const newVolume = event.target.value;\n        this.audio.volume = newVolume;\n    }\n\n    initializeFirstSong() {\n        const firstPlaylist = document.querySelector('.playlist');\n        if (!firstPlaylist) return;\n\n        const firstSong = firstPlaylist.querySelector('.song');\n        if (!firstSong) return;\n\n        this.currentPlaylist = firstPlaylist;\n        this.currentSong = firstSong;\n        this.audio.src = firstSong.dataset.src;\n\n        this.updatePlayerInfo(firstSong);\n\n        if(this.downloadButton){\n            this.updateDownloadButton(firstSong);\n        }\n\n    }\n\n    toggleRandom() {\n        this.isRandom = !this.isRandom;\n\n        // Adicionar ou remover a classe 'active' no botÃ£o random\n        if (this.isRandom) {\n            this.randomButton.classList.add('active');\n        } else {\n            this.randomButton.classList.remove('active');\n        }\n    }\n\n    getRandomSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        let randomSong;\n\n        do {\n            randomSong = songs[Math.floor(Math.random() * songs.length)];\n        } while (randomSong === this.currentSong && songs.length > 1);\n\n        return randomSong;\n    }\n\n    getNextSong() {\n        if (this.isRandom) {\n            return this.getRandomSong();\n        }\n\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex + 1] || (this.isLooping ? songs[0] : null);\n    }\n\n    getPreviousSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex - 1] || (this.isLooping ? songs[songs.length - 1] : null);\n    }\n\n    play(songElement, playlistElement) {\n        const songSrc = songElement.dataset.src;\n\n        if (this.currentSong && this.currentSong !== songElement) {\n            this.currentSong.querySelector('.play-button').classList.remove('active');\n            this.currentSong.classList.remove('active');\n        }\n\n        if (this.audio.src !== songSrc) {\n            this.audio.src = songSrc;\n        }\n        this.audio.play();\n        this.isPlaying = true;\n        this.currentSong = songElement;\n        this.currentPlaylist = playlistElement;\n\n        this.updatePlayerInfo(songElement);\n        this.syncButtons(songElement);\n\n        this.updateDownloadButton(songElement);\n    }\n\n    pause(songElement) {\n        this.audio.pause();\n        this.isPlaying = false;\n        songElement.querySelector('.play-button').classList.remove('active');\n        songElement.classList.remove('active');\n        this.playPauseButton.classList.remove('active');\n    }\n\n    togglePlayPause() {\n        if (this.isPlaying) {\n            this.pause(this.currentSong);\n            this.playPauseButton.textContent = 'Play';\n        } else {\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong.querySelector('.play-button').classList.add('active');\n            this.currentSong.classList.add('active');\n            this.playPauseButton.classList.add('active');\n            this.playPauseButton.textContent = 'Pause';\n        }\n    }\n\n    toggleLoop() {\n        this.isLooping = !this.isLooping;\n\n        if (this.isLooping) {\n            this.loopButton.classList.add('active');\n        } else {\n            this.loopButton.classList.remove('active');\n        }\n    }\n\n    next() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        }\n    }\n\n    previous() {\n        if (this.audio.currentTime > 2) {\n            this.audio.currentTime = 0;\n        } else {\n            const previousSong = this.getPreviousSong();\n            if (previousSong) {\n                this.play(previousSong, this.currentPlaylist);\n            }\n        }\n    }\n\n    handleSongEnd() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        } else {\n            this.isPlaying = false;\n            this.audio.currentTime = 0;\n            this.syncButtons(null);\n        }\n    }\n\n    updatePlayerInfo(songElement) {\n        this.titleElement.textContent = songElement.querySelector('.title').textContent;\n        this.artistElement.textContent = songElement.querySelector('.artist').textContent;\n        this.timeElement.textContent = songElement.querySelector('.time').textContent;\n\n        const genders = [...songElement.querySelectorAll('.genders li')].map(li => li.textContent);\n        this.gendersElement.textContent = genders.join(', ');\n\n        const thumbSrc = songElement.querySelector('.thumb').src;\n        this.thumbElement.src = thumbSrc;\n    }\n\n    syncButtons(songElement) {\n        document.querySelectorAll('.play-button').forEach(button => button.classList.remove('active'));\n        document.querySelectorAll('.song').forEach(song => song.classList.remove('active'));\n\n        if (songElement) {\n            songElement.querySelector('.play-button').classList.add('active');\n            songElement.classList.add('active');\n            this.playPauseButton.classList.add('active');\n            this.playPauseButton.textContent = 'Pause';\n        } else {\n            this.playPauseButton.classList.remove('active');\n            this.playPauseButton.textContent = 'Play';\n        }\n    }\n\n    updateProgressBar() {\n        const progress = (this.audio.currentTime / this.audio.duration) * 100;\n        this.progressBar.style.width = `${progress}%`;\n    }\n\n    seek(event) {\n        const rect = this.progressBarContainer.getBoundingClientRect();\n        const offsetX = event.clientX - rect.left;\n        const percentage = offsetX / rect.width;\n        this.audio.currentTime = percentage * this.audio.duration;\n    }\n\n    startDrag(event) {\n        const dragHandler = (e) => this.seek(e);\n        const stopDrag = () => {\n            document.removeEventListener('mousemove', dragHandler);\n            document.removeEventListener('mouseup', stopDrag);\n        };\n\n        document.addEventListener('mousemove', dragHandler);\n        document.addEventListener('mouseup', stopDrag);\n\n        this.seek(event);\n    }\n\n    updateDownloadButton(songElement) {\n        if(this.downloadButton){\n            const downloadLink = songElement.querySelector('.download-link').href;\n            this.downloadButton.setAttribute('href', downloadLink);\n            this.downloadButton.removeAttribute('disabled');\n        }\n    }\n}\n\n\n\n// Inicializar o player apenas se o elemento existir\nif (document.querySelector('#player-main')) {\n    const player = new Player();\n\n    // Configurar eventos para as mÃºsicas\n    document.addEventListener('click', (event) => {\n        const playButton = event.target.closest('.play-button');\n        if (!playButton) return;\n\n        const song = playButton.closest('.song');\n        const playlist = playButton.closest('.playlist');\n        \n        if (!song || !playlist) return;\n\n        if (player.currentSong === song && player.isPlaying) {\n            player.pause(song);\n        } else {\n            player.play(song, playlist);\n        }\n    });\n}","function handleDownload(event) {\n    fetch(`${wpApiSettings.root}soniica/v1/register-download`, {\n        method: 'POST',\n        headers: {\n            'X-WP-Nonce': wpApiSettings.nonce,\n            'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (!data.success) {\n            event.preventDefault();\n            alert(data.message);\n            return false;\n        } else {\n            // Atualiza o estado de todos os botÃµes de download para usuÃ¡rios nÃ£o premium\n            if (!data.is_premium) {\n                document.querySelectorAll('.download-link').forEach(downloadLink => {\n                    downloadLink.classList.add('download-blocked');\n                    downloadLink.setAttribute('title', 'Aguarde 24 horas para fazer outro download.');\n                    downloadLink.textContent = 'Download indisponÃ­vel';\n                    downloadLink.removeAttribute('href');\n                    downloadLink.removeAttribute('download');\n                    downloadLink.style.cursor = 'not-allowed';\n                });\n            }\n        }\n    })\n    .catch(error => {\n        console.error('Erro:', error);\n        event.preventDefault();\n        return false;\n    });\n\n    return true;\n}","\n    const userAvatar = document.querySelector(\".user-avatar\");\n    const userSubMenu = document.querySelector(\".user-sub-menu\");\n\n    if (userAvatar && userSubMenu) {\n        userAvatar.addEventListener(\"click\", function (event) {\n            userSubMenu.classList.toggle(\"active\");\n        });\n\n        document.addEventListener(\"click\", function (event) {\n            if (!userAvatar.contains(event.target) && !userSubMenu.contains(event.target)) {\n                userSubMenu.classList.remove(\"active\");\n            }\n        });\n    }\n"]}