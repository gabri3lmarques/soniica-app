{"version":3,"sources":["flash-message/flash-message.js","accordion/accordion.js","player/player.js","profile-img/profile-img.js","song/song.js","top-menu/top-menu.js"],"names":["let","fm_close","document","querySelector","modal","addEventListener","style","display","AccordionMenu","constructor","this","accordionItems","querySelectorAll","init","forEach","item","currentItem","isActive","classList","contains","remove","maxHeight","add","content","scrollHeight","Player","audio","Audio","currentSong","currentPlaylist","isPlaying","isLooping","isRandom","titleElement","artistElement","timeElement","gendersElement","thumbElement","playPauseButton","nextButton","previousButton","loopButton","randomButton","progressBarContainer","progressBar","volumeSlider","togglePlayPause","next","previous","toggleLoop","toggleRandom","updateProgressBar","handleSongEnd","adjustVolume","e","seek","startDrag","initializeFirstSong","volume","value","event","newVolume","target","rightVolume","leftVolume","background","firstPlaylist","firstSong","encodedUrl","dataset","src","decodedUrl","atob","startsWith","updatePlayerInfo","console","error","getRandomSong","songs","randomSong","Math","floor","random","length","getNextSong","currentIndex","findIndex","song","getPreviousSong","play","songElement","playlistElement","syncButtons","pause","playButton","nextSong","previousSong","currentTime","textContent","thumbSrc","button","progress","duration","width","rect","getBoundingClientRect","offsetX","clientX","left","dragHandler","stopDrag","removeEventListener","window","globalPlayer","closest","playlist","profilePictureForm","removeProfilePicture","preventDefault","fileInput","formData","FormData","append","files","fetch","method","body","credentials","then","res","json","data","log","message","getElementById","handleDownload","wpApiSettings","root","headers","X-WP-Nonce","nonce","Content-Type","response","success","alert","is_premium","downloadLink","setAttribute","removeAttribute","catch","confirm","playerDownloadButtons","isBase64","str","btoa","PlayerManager","instance","getInstance","stopGlobalPlayer","encodedDownloadLink","getAttribute","decodedLink","open","location","href","userAvatar","userSubMenu","toggle"],"mappings":"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","file":"main.min.js","sourcesContent":["let fm_close = document.querySelector('.fm-close');\r\nlet modal = document.querySelector('.flash-message-overlay');\r\n\r\nif(fm_close ){\r\n    fm_close.addEventListener('click', function() {\r\n        modal.style.display = 'none';\r\n    });\r\n}\r\n","class AccordionMenu {\r\n    constructor() {\r\n        this.accordionItems = document.querySelectorAll('.accordion-item');\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.accordionItems.forEach(item => {\r\n            const header = item.querySelector('.accordion-header');\r\n            \r\n            header.addEventListener('click', () => {\r\n                const currentItem = item;\r\n                const isActive = currentItem.classList.contains('active');\r\n                \r\n                // Fecha todos os itens\r\n                this.accordionItems.forEach(item => {\r\n                    item.classList.remove('active');\r\n                    const content = item.querySelector('.accordion-content');\r\n                    content.style.maxHeight = null;\r\n                });\r\n                \r\n                // Abre o item atual se não estava ativo\r\n                if (!isActive) {\r\n                    currentItem.classList.add('active');\r\n                    const content = currentItem.querySelector('.accordion-content');\r\n                    content.style.maxHeight = content.scrollHeight + \"px\";\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n// Inicializa o accordion quando o DOM estiver pronto\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    if (document.querySelector('.accordion-item')) {\r\n        new AccordionMenu();\r\n    }\r\n});","class Player {\r\n    constructor() {\r\n        this.audio = new Audio();\r\n        this.currentSong = null;\r\n        this.currentPlaylist = null;\r\n        this.isPlaying = false;\r\n        this.isLooping = false; // Estado do loop\r\n        this.isRandom = false; // Estado do random\r\n        // Elementos do player principal\r\n        this.titleElement = document.querySelector('.current-title');\r\n        this.artistElement = document.querySelector('.current-artist');\r\n        this.timeElement = document.querySelector('.current-time');\r\n        this.gendersElement = document.querySelector('.current-genders');\r\n        this.thumbElement = document.querySelector('.current-thumb');\r\n        this.playPauseButton = document.querySelector('.play-pause');\r\n        this.nextButton = document.querySelector('.next');\r\n        this.previousButton = document.querySelector('.previous');\r\n        this.loopButton = document.querySelector('.loop');\r\n        this.randomButton = document.querySelector('.random'); // Botão de random\r\n        this.progressBarContainer = document.querySelector('.progress-bar-container');\r\n        this.progressBar = document.querySelector('.progress-bar');\r\n        this.volumeSlider = document.querySelector('#volume-slider'); // Slider de volume\r\n        // Event listeners\r\n        this.playPauseButton.addEventListener('click', () => this.togglePlayPause());\r\n        this.nextButton.addEventListener('click', () => this.next());\r\n        this.previousButton.addEventListener('click', () => this.previous());\r\n        this.loopButton.addEventListener('click', () => this.toggleLoop());\r\n        this.randomButton.addEventListener('click', () => this.toggleRandom());\r\n        this.audio.addEventListener('timeupdate', () => this.updateProgressBar());\r\n        this.audio.addEventListener('ended', () => this.handleSongEnd());\r\n        this.volumeSlider.addEventListener('input', (e) => this.adjustVolume(e));\r\n        // Eventos para a barra de progresso\r\n        this.progressBarContainer.addEventListener('click', (e) => this.seek(e));\r\n        this.progressBarContainer.addEventListener('mousedown', (e) => this.startDrag(e));\r\n        // Inicializar a primeira música automaticamente\r\n        this.initializeFirstSong();\r\n        this.audio.volume = this.volumeSlider.value;\r\n    }\r\n    adjustVolume(event) {\r\n        // Ajustar o volume do elemento de áudio com base no slider\r\n        const newVolume = event.target.value;\r\n        const rightVolume = newVolume * 100;\r\n        const leftVolume = 100 - rightVolume;\r\n        this.audio.volume = newVolume;\r\n        this.volumeSlider.style.background = `linear-gradient(to right, #708303, #e9ff70 ${rightVolume}%, #272727 ${leftVolume}%)`;\r\n    }\r\n    initializeFirstSong() {\r\n        const firstPlaylist = document.querySelector('.playlist');\r\n        if (!firstPlaylist) return;\r\n        const firstSong = firstPlaylist.querySelector('.song');\r\n        if (!firstSong) return;\r\n        this.currentPlaylist = firstPlaylist;\r\n        this.currentSong = firstSong;\r\n        // Fix: songElement was undefined, should use firstSong\r\n        const encodedUrl = firstSong.dataset.src;\r\n        try {\r\n            const decodedUrl = atob(encodedUrl);\r\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\r\n                console.error('Invalid decoded URL:', decodedUrl);\r\n                return;\r\n            }\r\n            this.audio.src = decodedUrl;\r\n            this.updatePlayerInfo(firstSong);\r\n        } catch (e) {\r\n            console.error('Error decoding URL:', e);\r\n        }\r\n    }\r\n    toggleRandom() {\r\n        this.isRandom = !this.isRandom;\r\n        // Adicionar ou remover a classe 'active' no botão random\r\n        if (this.isRandom) {\r\n            this.randomButton.classList.add('active');\r\n        } else {\r\n            this.randomButton.classList.remove('active');\r\n        }\r\n    }\r\n    getRandomSong() {\r\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\r\n        let randomSong;\r\n        do {\r\n            randomSong = songs[Math.floor(Math.random() * songs.length)];\r\n        } while (randomSong === this.currentSong && songs.length > 1);\r\n        return randomSong;\r\n    }\r\n    getNextSong() {\r\n        if (this.isRandom) {\r\n            return this.getRandomSong();\r\n        }\r\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\r\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\r\n        return songs[currentIndex + 1] || (this.isLooping ? songs[0] : null);\r\n    }\r\n    getPreviousSong() {\r\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\r\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\r\n        return songs[currentIndex - 1] || (this.isLooping ? songs[songs.length - 1] : null);\r\n    }\r\n    play(songElement, playlistElement) {\r\n        try {\r\n            const encodedUrl = songElement.dataset.src;\r\n            const decodedUrl = atob(encodedUrl);\r\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\r\n                console.error('Invalid decoded URL:', decodedUrl);\r\n                return;\r\n            }\r\n            if (this.currentSong && this.currentSong !== songElement) {\r\n                this.currentSong.querySelector('.play-button').classList.remove('active');\r\n                this.currentSong.classList.remove('active');\r\n            }\r\n            if (this.audio.src !== decodedUrl) {\r\n                this.audio.src = decodedUrl;\r\n            }\r\n            this.audio.play();\r\n            this.isPlaying = true;\r\n            this.currentSong = songElement;\r\n            this.currentPlaylist = playlistElement;\r\n            this.updatePlayerInfo(songElement);\r\n            this.syncButtons(songElement);\r\n        } catch (e) {\r\n            console.error('Error playing song:', e);\r\n        }\r\n    }\r\n    pause(songElement = null) {\r\n        this.audio.pause();\r\n        this.isPlaying = false;\r\n        if (songElement) {\r\n            const playButton = songElement.querySelector('.play-button');\r\n            if (playButton) playButton.classList.remove('active');\r\n            songElement.classList.remove('active');\r\n        }\r\n        this.playPauseButton.classList.remove('active');\r\n    }\r\n    togglePlayPause() {\r\n        if (this.isPlaying) {\r\n            this.pause(this.currentSong);\r\n        } else {\r\n            this.audio.play();\r\n            this.isPlaying = true;\r\n            this.currentSong.querySelector('.play-button').classList.add('active');\r\n            this.currentSong.classList.add('active');\r\n            this.playPauseButton.classList.add('active');\r\n        }\r\n    }\r\n    toggleLoop() {\r\n        this.isLooping = !this.isLooping;\r\n        if (this.isLooping) {\r\n            this.loopButton.classList.add('active');\r\n        } else {\r\n            this.loopButton.classList.remove('active');\r\n        }\r\n    }\r\n    next() {\r\n        const nextSong = this.getNextSong();\r\n        if (nextSong) {\r\n            this.play(nextSong, this.currentPlaylist);\r\n        }\r\n    }\r\n    previous() {\r\n        if (this.audio.currentTime > 2) {\r\n            this.audio.currentTime = 0;\r\n        } else {\r\n            const previousSong = this.getPreviousSong();\r\n            if (previousSong) {\r\n                this.play(previousSong, this.currentPlaylist);\r\n            }\r\n        }\r\n    }\r\n    handleSongEnd() {\r\n        const nextSong = this.getNextSong();\r\n        if (nextSong) {\r\n            this.play(nextSong, this.currentPlaylist);\r\n        } else {\r\n            this.isPlaying = false;\r\n            this.audio.currentTime = 0;\r\n            this.syncButtons(null);\r\n        }\r\n    }\r\n    updatePlayerInfo(songElement) {\r\n        this.titleElement.textContent = songElement.querySelector('.title').textContent;\r\n        this.artistElement.textContent = songElement.querySelector('.artist').textContent;\r\n        this.timeElement.textContent = songElement.querySelector('.time').textContent;\r\n        //const genders = [...songElement.querySelectorAll('.genders li')].map(li => li.textContent);\r\n        //this.gendersElement.textContent = genders.join(', ');\r\n        const thumbSrc = songElement.querySelector('.thumb').src;\r\n        this.thumbElement.src = thumbSrc;\r\n    }\r\n    syncButtons(songElement) {\r\n        document.querySelectorAll('.play-button').forEach(button => button.classList.remove('active'));\r\n        document.querySelectorAll('.song').forEach(song => song.classList.remove('active'));\r\n\r\n        if (songElement) {\r\n            songElement.querySelector('.play-button').classList.add('active');\r\n            songElement.classList.add('active');\r\n            this.playPauseButton.classList.add('active');\r\n        } else {\r\n            this.playPauseButton.classList.remove('active');\r\n        }\r\n    }\r\n    updateProgressBar() {\r\n        const progress = (this.audio.currentTime / this.audio.duration) * 100;\r\n        this.progressBar.style.width = `${progress}%`;\r\n    }\r\n    seek(event) {\r\n        const rect = this.progressBarContainer.getBoundingClientRect();\r\n        const offsetX = event.clientX - rect.left;\r\n        const percentage = offsetX / rect.width;\r\n        this.audio.currentTime = percentage * this.audio.duration;\r\n    }\r\n    startDrag(event) {\r\n        const dragHandler = (e) => this.seek(e);\r\n        const stopDrag = () => {\r\n            document.removeEventListener('mousemove', dragHandler);\r\n            document.removeEventListener('mouseup', stopDrag);\r\n        };\r\n        document.addEventListener('mousemove', dragHandler);\r\n        document.addEventListener('mouseup', stopDrag);\r\n\r\n        this.seek(event);\r\n    }\r\n}    \r\n// Inicializar o player apenas se o elemento existir\r\nif (document.querySelector('#player-main')) {\r\n    \r\n    window.globalPlayer = new Player(); // Define como global\r\n\r\n    // Configurar eventos para as músicas\r\n    document.addEventListener('click', (event) => {\r\n        const playButton = event.target.closest('.play-button');\r\n        if (!playButton) return;\r\n\r\n        const song = playButton.closest('.song');\r\n        const playlist = playButton.closest('.playlist');\r\n        \r\n        if (!song || !playlist) return;\r\n\r\n        if (globalPlayer.currentSong === song && globalPlayer.isPlaying) {\r\n            globalPlayer.pause(song);\r\n        } else {\r\n            globalPlayer.play(song, playlist);\r\n        }\r\n    });\r\n}","let profilePictureForm = document.querySelector(\"#profile-picture-form\");\r\nif(profilePictureForm) {\r\n    profilePictureForm.addEventListener(\"submit\", function (e) {\r\n        e.preventDefault();\r\n        const fileInput = document.querySelector('input[name=\"profile_picture\"]');\r\n        const formData = new FormData();\r\n        formData.append(\"action\", \"upload_profile_picture\");\r\n        formData.append(\"profile_picture\", fileInput.files[0]);\r\n        fetch(\"/wp-admin/admin-ajax.php\", {\r\n          method: \"POST\",\r\n          body: formData,\r\n          credentials: \"same-origin\",\r\n        })\r\n          .then(res => res.json())\r\n          .then(data => {\r\n            console.log(data.data?.message)\r\n            document.getElementById(\"upload-status\").textContent = data.data?.message;\r\n          });\r\n      });\r\n}\r\n\r\nlet removeProfilePicture = document.getElementById(\"remove-profile-picture\");\r\nif(removeProfilePicture) {\r\n  removeProfilePicture.addEventListener(\"click\", function () {\r\n    if (!confirm(\"Are you sure you want to remove your profile picture?\")) return;\r\n  \r\n    const formData = new FormData();\r\n    formData.append(\"action\", \"remove_profile_picture\");\r\n  \r\n    fetch(\"/wp-admin/admin-ajax.php\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n      credentials: \"same-origin\",\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        console.log(data);\r\n        document.getElementById(\"upload-status\").textContent = data.data?.message || \"Erro ao remover imagem.\";\r\n        document.getElementById(\"profile-picture-preview\").src = \"\"; // ou uma imagem padrão\r\n      });\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n  ","function handleDownload(event) {\r\n    fetch(`${wpApiSettings.root}soniica/v1/register-download`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'X-WP-Nonce': wpApiSettings.nonce,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'same-origin'\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        if (!data.success) {\r\n            event.preventDefault();\r\n            alert(data.message);\r\n            return false;\r\n        } else {\r\n            // Atualiza o estado de todos os botões de download para usuários não premium\r\n            if (!data.is_premium) {\r\n                document.querySelectorAll('.download-link').forEach(downloadLink => {\r\n                    downloadLink.classList.add('download-blocked');\r\n                    downloadLink.setAttribute('title', 'You have reached the download limit on free plan today.');\r\n                    //downloadLink.textContent = 'Download indisponível';\r\n                    downloadLink.setAttribute('href', '/get-premium');\r\n                    downloadLink.removeAttribute('download');\r\n                });\r\n            }\r\n        }\r\n    })\r\n    .catch(error => {\r\n        console.error('Erro:', error);\r\n        event.preventDefault();\r\n        return false;\r\n    });\r\n\r\n    return true;\r\n}\r\n\r\nconst playerDownloadButtons = document.querySelectorAll('.download-link');\r\n\r\nfunction isBase64(str) {\r\n    try {\r\n        return btoa(atob(str)) === str;\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n}\r\n\r\nconst PlayerManager = (function () {\r\n    let instance = null;\r\n\r\n    return {\r\n        getInstance: function () {\r\n            if (!instance) {\r\n                instance = new Player();\r\n            }\r\n            return instance;\r\n        }\r\n    };\r\n})();\r\n\r\nfunction stopGlobalPlayer() {\r\n    if (window.globalPlayer && window.globalPlayer.currentSong) {\r\n        window.globalPlayer.pause(window.globalPlayer.currentSong);\r\n    }\r\n}\r\n\r\n\r\n\r\nplayerDownloadButtons.forEach((button) => {\r\n    button.addEventListener('click', (event) => {\r\n        event.preventDefault();\r\n\r\n        let encodedDownloadLink = button.getAttribute(\"href\");\r\n        let decodedLink = '';\r\n\r\n        // Verifica se a string é Base64 válida antes de decodificar\r\n        if (isBase64(encodedDownloadLink)) {\r\n            // se for base64, decodifica\r\n            decodedLink = atob(encodedDownloadLink);\r\n        } else {\r\n            // se não for, usa o link normal\r\n            decodedLink = encodedDownloadLink;\r\n \r\n            window.location.href = decodedLink;\r\n            return;\r\n        }\r\n\r\n        if (!button.classList.contains('download-blocked')) {\r\n            window.open(decodedLink, '_blank');\r\n        } else {\r\n            console.log('deu ruim');\r\n        }\r\n    });\r\n});\r\n\r\nwindow.addEventListener('beforeunload', function(event) {\r\n    stopGlobalPlayer();\r\n});\r\n","\r\n    const userAvatar = document.querySelector(\".user-avatar\");\r\n    const userSubMenu = document.querySelector(\".user-sub-menu\");\r\n\r\n    if (userAvatar && userSubMenu) {\r\n        userAvatar.addEventListener(\"click\", function (event) {\r\n            userSubMenu.classList.toggle(\"active\");\r\n        });\r\n\r\n        document.addEventListener(\"click\", function (event) {\r\n            if (!userAvatar.contains(event.target) && !userSubMenu.contains(event.target)) {\r\n                userSubMenu.classList.remove(\"active\");\r\n            }\r\n        });\r\n    }\r\n"]}