{"version":3,"sources":["flash-message/flash-message.js","accordion/accordion.js","playlist-modal/playlist-modal.js","player/player.js","profile-img/profile-img.js","song/song.js","top-menu/top-menu.js"],"names":["let","fm_close","document","querySelector","modal","addEventListener","style","display","AccordionMenu","constructor","this","accordionItems","querySelectorAll","init","forEach","item","currentItem","isActive","classList","contains","remove","maxHeight","add","content","scrollHeight","button","event","originalForm","currentTarget","closest","modalBody","modalBackground","modalCloseButton","clonedForm","cloneNode","innerHTML","appendChild","closeModal","removeEventListener","closeOnOutsideClick","e","target","setTimeout","Player","audio","Audio","currentSong","currentPlaylist","isPlaying","isLooping","isRandom","titleElement","artistElement","timeElement","gendersElement","thumbElement","playPauseButton","nextButton","previousButton","loopButton","randomButton","progressBarContainer","progressBar","volumeSlider","togglePlayPause","next","previous","toggleLoop","toggleRandom","updateProgressBar","handleSongEnd","adjustVolume","seek","startDrag","initializeFirstSong","volume","value","isPlayerDisabled","newVolume","rightVolume","leftVolume","background","firstPlaylist","firstSong","encodedUrl","dataset","src","decodedUrl","atob","startsWith","updatePlayerInfo","console","error","getRandomSong","randomSong","songs","Math","floor","random","length","getNextSong","currentIndex","findIndex","song","getPreviousSong","play","songElement","playlistElement","syncButtons","pause","playButton","nextSong","previousSong","currentTime","textContent","thumbSrc","progress","duration","width","rect","getBoundingClientRect","offsetX","clientX","left","dragHandler","stopDrag","window","globalPlayer","playlist","profilePictureForm","removeProfilePicture","preventDefault","fileInput","formData","FormData","append","files","fetch","method","body","credentials","then","res","json","data","log","message","getElementById","handleDownload","wpApiSettings","root","headers","X-WP-Nonce","nonce","Content-Type","response","success","alert","is_premium","downloadLink","setAttribute","removeAttribute","catch","confirm","playerDownloadButtons","isBase64","str","btoa","PlayerManager","instance","getInstance","stopGlobalPlayer","encodedDownloadLink","getAttribute","decodedLink","open","location","href","userAvatar","userSubMenu","toggle"],"mappings":"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","file":"main.min.js","sourcesContent":["let fm_close = document.querySelector('.fm-close');\nlet modal = document.querySelector('.flash-message-overlay');\n\nif(fm_close ){\n    fm_close.addEventListener('click', function() {\n        modal.style.display = 'none';\n    });\n}\n","class AccordionMenu {\n    constructor() {\n        this.accordionItems = document.querySelectorAll('.accordion-item');\n        this.init();\n    }\n\n    init() {\n        this.accordionItems.forEach(item => {\n            const header = item.querySelector('.accordion-header');\n            \n            header.addEventListener('click', () => {\n                const currentItem = item;\n                const isActive = currentItem.classList.contains('active');\n                \n                // Fecha todos os itens\n                this.accordionItems.forEach(item => {\n                    item.classList.remove('active');\n                    const content = item.querySelector('.accordion-content');\n                    content.style.maxHeight = null;\n                });\n                \n                // Abre o item atual se não estava ativo\n                if (!isActive) {\n                    currentItem.classList.add('active');\n                    const content = currentItem.querySelector('.accordion-content');\n                    content.style.maxHeight = content.scrollHeight + \"px\";\n                }\n            });\n        });\n    }\n}\n\n// Inicializa o accordion quando o DOM estiver pronto\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (document.querySelector('.accordion-item')) {\n        new AccordionMenu();\n    }\n});","document.querySelectorAll('.add-to-playlist-button').forEach(button => {\n  button.addEventListener('click', event => {\n    const songElement = event.currentTarget.closest('.song');\n    const originalForm = songElement.querySelector('.playlist-form');\n\n    const modal = document.querySelector('.playlist-modal');\n    const modalBody = document.querySelector('.playlist-modal-body');\n    const modalBackground = document.querySelector('.playlist-modal-background');\n    const modalCloseButton = document.querySelector('.playlist-modal-close');\n\n    if (originalForm && modalBody && modalBackground) {\n      const clonedForm = originalForm.cloneNode(true); // clona o formulário inteiro\n\n      modalBody.innerHTML = ''; // limpa conteúdo anterior\n      modalBody.appendChild(clonedForm); // insere o clone\n      modalBackground.classList.add('active');\n\n      // Função de fechar modal\n      const closeModal = () => {\n        modalBackground.classList.remove('active');\n        document.removeEventListener('click', closeOnOutsideClick);\n        if (modalCloseButton) {\n          modalCloseButton.removeEventListener('click', closeModal);\n        }\n      };\n\n      // Fechar ao clicar fora do modal\n      const closeOnOutsideClick = (e) => {\n        if (!modal.contains(e.target)) {\n          closeModal();\n        }\n      };\n\n      // Espera para evitar conflito com o clique atual\n      setTimeout(() => {\n        document.addEventListener('click', closeOnOutsideClick);\n      }, 10);\n\n      // Fechar ao clicar no botão \"X\"\n      if (modalCloseButton) {\n        modalCloseButton.addEventListener('click', closeModal);\n      }\n    }\n  });\n});\n","class Player {\n    constructor() {\n        this.audio = new Audio();\n        this.currentSong = null;\n        this.currentPlaylist = null;\n        this.isPlaying = false;\n        this.isLooping = false; // Estado do loop\n        this.isRandom = false; // Estado do random\n        // Elementos do player principal\n        this.titleElement = document.querySelector('.current-title');\n        this.artistElement = document.querySelector('.current-artist');\n        this.timeElement = document.querySelector('.current-time');\n        this.gendersElement = document.querySelector('.current-genders');\n        this.thumbElement = document.querySelector('.current-thumb');\n        this.playPauseButton = document.querySelector('.play-pause');\n        this.nextButton = document.querySelector('.next');\n        this.previousButton = document.querySelector('.previous');\n        this.loopButton = document.querySelector('.loop');\n        this.randomButton = document.querySelector('.random'); // Botão de random\n        this.progressBarContainer = document.querySelector('.progress-bar-container');\n        this.progressBar = document.querySelector('.progress-bar');\n        this.volumeSlider = document.querySelector('#volume-slider'); // Slider de volume\n        // Event listeners\n        this.playPauseButton.addEventListener('click', () => this.togglePlayPause());\n        this.nextButton.addEventListener('click', () => this.next());\n        this.previousButton.addEventListener('click', () => this.previous());\n        this.loopButton.addEventListener('click', () => this.toggleLoop());\n        this.randomButton.addEventListener('click', () => this.toggleRandom());\n        this.audio.addEventListener('timeupdate', () => this.updateProgressBar());\n        this.audio.addEventListener('ended', () => this.handleSongEnd());\n        this.volumeSlider.addEventListener('input', (e) => this.adjustVolume(e));\n        // Eventos para a barra de progresso\n        this.progressBarContainer.addEventListener('click', (e) => this.seek(e));\n        this.progressBarContainer.addEventListener('mousedown', (e) => this.startDrag(e));\n        // Inicializar a primeira música automaticamente\n        this.initializeFirstSong();\n        this.audio.volume = this.volumeSlider.value;\n    }\n    isPlayerDisabled() {\n        return document.querySelector('#player-main')?.classList.contains('disabled');\n    }\n    adjustVolume(event) {\n        // Ajustar o volume do elemento de áudio com base no slider\n        const newVolume = event.target.value;\n        const rightVolume = newVolume * 100;\n        const leftVolume = 100 - rightVolume;\n        this.audio.volume = newVolume;\n        this.volumeSlider.style.background = `linear-gradient(to right, #708303, #e9ff70 ${rightVolume}%, #272727 ${leftVolume}%)`;\n    }\n    initializeFirstSong() {\n        const firstPlaylist = document.querySelector('.playlist');\n        if (!firstPlaylist) return;\n        const firstSong = firstPlaylist.querySelector('.song');\n        if (!firstSong) return;\n        this.currentPlaylist = firstPlaylist;\n        this.currentSong = firstSong;\n        // Fix: songElement was undefined, should use firstSong\n        const encodedUrl = firstSong.dataset.src;\n        try {\n            const decodedUrl = atob(encodedUrl);\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                console.error('Invalid decoded URL:', decodedUrl);\n                return;\n            }\n            this.audio.src = decodedUrl;\n            this.updatePlayerInfo(firstSong);\n        } catch (e) {\n            console.error('Error decoding URL:', e);\n        }\n    }\n    toggleRandom() {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        this.isRandom = !this.isRandom;\n        // Adicionar ou remover a classe 'active' no botão random\n        if (this.isRandom) {\n            this.randomButton.classList.add('active');\n        } else {\n            this.randomButton.classList.remove('active');\n        }\n    }\n    getRandomSong() {\n                if(this.isPlayerDisabled()){\n            return\n        }\n        let randomSong;\n        do {\n            randomSong = songs[Math.floor(Math.random() * songs.length)];\n        } while (randomSong === this.currentSong && songs.length > 1);\n        return randomSong;\n    }\n    getNextSong() {\n        if (this.isRandom) {\n            return this.getRandomSong();\n        }\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex + 1] || (this.isLooping ? songs[0] : null);\n    }\n    getPreviousSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex - 1] || (this.isLooping ? songs[songs.length - 1] : null);\n    }\n    play(songElement, playlistElement) {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        try {\n            const encodedUrl = songElement.dataset.src;\n            const decodedUrl = atob(encodedUrl);\n            if (!decodedUrl.startsWith('http://') && !decodedUrl.startsWith('https://')) {\n                console.error('Invalid decoded URL:', decodedUrl);\n                return;\n            }\n            if (this.currentSong && this.currentSong !== songElement) {\n                this.currentSong.querySelector('.play-button').classList.remove('active');\n                this.currentSong.classList.remove('active');\n            }\n            if (this.audio.src !== decodedUrl) {\n                this.audio.src = decodedUrl;\n            }\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong = songElement;\n            this.currentPlaylist = playlistElement;\n            this.updatePlayerInfo(songElement);\n            this.syncButtons(songElement);\n\n        } catch (e) {\n            console.error('Error playing song:', e);\n        }\n    }\n    pause(songElement = null) {\n        this.audio.pause();\n        this.isPlaying = false;\n        if (songElement) {\n            const playButton = songElement.querySelector('.play-button');\n            if (playButton) playButton.classList.remove('active');\n            songElement.classList.remove('active');\n        }\n        this.playPauseButton.classList.remove('active');\n    }\n    togglePlayPause() {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        if (this.isPlaying) {\n            this.pause(this.currentSong);\n        } else {\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong.querySelector('.play-button').classList.add('active');\n            this.currentSong.classList.add('active');\n            this.playPauseButton.classList.add('active');\n        }\n    }\n    toggleLoop() {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        this.isLooping = !this.isLooping;\n        if (this.isLooping) {\n            this.loopButton.classList.add('active');\n        } else {\n            this.loopButton.classList.remove('active');\n        }\n    }\n    next() {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        }\n    }\n    previous() {\n        if(this.isPlayerDisabled()){\n            return\n        }\n        if (this.audio.currentTime > 2) {\n            this.audio.currentTime = 0;\n        } else {\n            const previousSong = this.getPreviousSong();\n            if (previousSong) {\n                this.play(previousSong, this.currentPlaylist);\n            }\n        }\n    }\n    handleSongEnd() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        } else {\n            this.isPlaying = false;\n            this.audio.currentTime = 0;\n            this.syncButtons(null);\n        }\n    }\n    updatePlayerInfo(songElement) {\n        this.titleElement.textContent = songElement.querySelector('.title').textContent;\n        this.artistElement.textContent = songElement.querySelector('.artist').textContent;\n        this.timeElement.textContent = songElement.querySelector('.time').textContent;\n        //const genders = [...songElement.querySelectorAll('.genders li')].map(li => li.textContent);\n        //this.gendersElement.textContent = genders.join(', ');\n        const thumbSrc = songElement.querySelector('.thumb').src;\n        this.thumbElement.src = thumbSrc;\n    }\n    syncButtons(songElement) {\n        document.querySelectorAll('.play-button').forEach(button => button.classList.remove('active'));\n        document.querySelectorAll('.song').forEach(song => song.classList.remove('active'));\n\n        if (songElement) {\n            songElement.querySelector('.play-button').classList.add('active');\n            songElement.classList.add('active');\n            this.playPauseButton.classList.add('active');\n        } else {\n            this.playPauseButton.classList.remove('active');\n        }\n    }\n    updateProgressBar() {\n        const progress = (this.audio.currentTime / this.audio.duration) * 100;\n        this.progressBar.style.width = `${progress}%`;\n    }\n    seek(event) {\n        const rect = this.progressBarContainer.getBoundingClientRect();\n        const offsetX = event.clientX - rect.left;\n        const percentage = offsetX / rect.width;\n        this.audio.currentTime = percentage * this.audio.duration;\n    }\n    startDrag(event) {\n        const dragHandler = (e) => this.seek(e);\n        const stopDrag = () => {\n            document.removeEventListener('mousemove', dragHandler);\n            document.removeEventListener('mouseup', stopDrag);\n        };\n        document.addEventListener('mousemove', dragHandler);\n        document.addEventListener('mouseup', stopDrag);\n\n        this.seek(event);\n    }\n}    \n// Inicializar o player apenas se o elemento existir\nif (document.querySelector('#player-main')) {\n    \n    window.globalPlayer = new Player(); // Define como global\n\n    // Configurar eventos para as músicas\n    document.addEventListener('click', (event) => {\n        const playButton = event.target.closest('.play-button');\n        if (!playButton) return;\n\n        const song = playButton.closest('.song');\n        const playlist = playButton.closest('.playlist');\n        \n        if (!song || !playlist) return;\n\n        if (globalPlayer.currentSong === song && globalPlayer.isPlaying) {\n            globalPlayer.pause(song);\n        } else {\n            globalPlayer.play(song, playlist);\n        }\n    });\n}\n","let profilePictureForm = document.querySelector(\"#profile-picture-form\");\nif(profilePictureForm) {\n    profilePictureForm.addEventListener(\"submit\", function (e) {\n        e.preventDefault();\n        const fileInput = document.querySelector('input[name=\"profile_picture\"]');\n        const formData = new FormData();\n        formData.append(\"action\", \"upload_profile_picture\");\n        formData.append(\"profile_picture\", fileInput.files[0]);\n        fetch(\"/wp-admin/admin-ajax.php\", {\n          method: \"POST\",\n          body: formData,\n          credentials: \"same-origin\",\n        })\n          .then(res => res.json())\n          .then(data => {\n            console.log(data.data?.message)\n            document.getElementById(\"upload-status\").textContent = data.data?.message;\n          });\n      });\n}\n\nlet removeProfilePicture = document.getElementById(\"remove-profile-picture\");\nif(removeProfilePicture) {\n  removeProfilePicture.addEventListener(\"click\", function () {\n    if (!confirm(\"Are you sure you want to remove your profile picture?\")) return;\n  \n    const formData = new FormData();\n    formData.append(\"action\", \"remove_profile_picture\");\n  \n    fetch(\"/wp-admin/admin-ajax.php\", {\n      method: \"POST\",\n      body: formData,\n      credentials: \"same-origin\",\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        document.getElementById(\"upload-status\").textContent = data.data?.message || \"Erro ao remover imagem.\";\n        document.getElementById(\"profile-picture-preview\").src = \"\"; // ou uma imagem padrão\n      });\n  });\n}\n\n\n\n\n  ","function handleDownload(event) {\n    fetch(`${wpApiSettings.root}soniica/v1/register-download`, {\n        method: 'POST',\n        headers: {\n            'X-WP-Nonce': wpApiSettings.nonce,\n            'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (!data.success) {\n            event.preventDefault();\n            alert(data.message);\n            return false;\n        } else {\n            // Atualiza o estado de todos os botões de download para usuários não premium\n            if (!data.is_premium) {\n                document.querySelectorAll('.download-link').forEach(downloadLink => {\n                    downloadLink.classList.add('download-blocked');\n                    downloadLink.setAttribute('title', 'You have reached the download limit on free plan today.');\n                    //downloadLink.textContent = 'Download indisponível';\n                    downloadLink.setAttribute('href', '/get-premium');\n                    downloadLink.removeAttribute('download');\n                });\n            }\n        }\n    })\n    .catch(error => {\n        console.error('Erro:', error);\n        event.preventDefault();\n        return false;\n    });\n\n    return true;\n}\n\nconst playerDownloadButtons = document.querySelectorAll('.download-link');\n\nfunction isBase64(str) {\n    try {\n        return btoa(atob(str)) === str;\n    } catch (e) {\n        return false;\n    }\n}\n\nconst PlayerManager = (function () {\n    let instance = null;\n\n    return {\n        getInstance: function () {\n            if (!instance) {\n                instance = new Player();\n            }\n            return instance;\n        }\n    };\n})();\n\nfunction stopGlobalPlayer() {\n    if (window.globalPlayer && window.globalPlayer.currentSong) {\n        window.globalPlayer.pause(window.globalPlayer.currentSong);\n    }\n}\n\n\n\nplayerDownloadButtons.forEach((button) => {\n    button.addEventListener('click', (event) => {\n        event.preventDefault();\n\n        let encodedDownloadLink = button.getAttribute(\"href\");\n        let decodedLink = '';\n\n        // Verifica se a string é Base64 válida antes de decodificar\n        if (isBase64(encodedDownloadLink)) {\n            // se for base64, decodifica\n            decodedLink = atob(encodedDownloadLink);\n        } else {\n            // se não for, usa o link normal\n            decodedLink = encodedDownloadLink;\n \n            window.location.href = decodedLink;\n            return;\n        }\n\n        if (!button.classList.contains('download-blocked')) {\n            window.open(decodedLink, '_blank');\n        } else {\n            console.log('deu ruim');\n        }\n    });\n});\n\nwindow.addEventListener('beforeunload', function(event) {\n    stopGlobalPlayer();\n});\n","\n    const userAvatar = document.querySelector(\".user-avatar\");\n    const userSubMenu = document.querySelector(\".user-sub-menu\");\n\n    if (userAvatar && userSubMenu) {\n        userAvatar.addEventListener(\"click\", function (event) {\n            userSubMenu.classList.toggle(\"active\");\n        });\n\n        document.addEventListener(\"click\", function (event) {\n            if (!userAvatar.contains(event.target) && !userSubMenu.contains(event.target)) {\n                userSubMenu.classList.remove(\"active\");\n            }\n        });\n    }\n"]}